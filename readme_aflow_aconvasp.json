{"--help": {"optional_attributes": [], "attributes": [], "description": "Gives Help information.\n", "additional_flags": {"-h": {}}, "mandatory commands": {}, "equivalent commands": []}, "--version": {"optional_attributes": [], "attributes": [], "description": "Gives Version Information.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["-v"]}, "--machine": {"optional_attributes": [], "attributes": [], "description": "Gives Machine Information.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--check_integrity": {"optional_attributes": [], "attributes": [], "description": "Check the integrity of xlib functions\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--checki"]}, "--abccar": {"optional_attributes": [], "attributes": [], "description": "Converts the POSCAR or WYCCAR in format.\nPOSCAR is the usual VASP file\nWYCCAR is described as\nTITLE\nSCALE (positive (rescaling) negative (volume))\nA B C ALPHA BETA GAMMA SG# [OPTION#]\n#specie0 #specie1 ....\nDIRECT (or CARTESIAN)\n.. .. .. specie0\n.. .. .. specie0\n. . .\n.. .. .. specie1\n.. .. .. specie1\nand so on. (Stefano Feb 2009)\nThe positions of the species will be used with the list of\nsymmetry operations (aflow_wyckoff.cpp) to generate all the atoms.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR ", " WYCCAR"]}, "--abinit": {"optional_attributes": [], "attributes": [], "description": "Transforms the POSCAR (or whicever is the input file format) to a              \nABINIT GEOM format.                                                  \nThe geometrical file follows the ABINIT convention.   \n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--aims": {"optional_attributes": [], "attributes": [], "description": "Transforms the POSCAR (or whicever is the input file format) to a              \nAIMS GEOM format.                                                  \nThe geometrical file follows the AIMS convention.   \n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--ace": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a cell standard ASCII (ace) file\nbased on the POSCAR input file.  This can be used as input\nfor CaRIne.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--aflux=": {"optional_attributes": [], "attributes": "\"summons\"", "description": "Command line interface to use the AFLUX Search API.\n<summons> has the same syntax as described in the article (doi: 10.1016/j.commatsci.2017.04.036).\nThough not required, it is recommended to put the summons between double quotes,\nso the user does not have to escape any parentheses.\ne.g. command:\naflow --aflux=\"enthalpy_formation_atom,natoms,sg2(*',Fm-3m #225'),aurl,species((Cl:Br),(Na:K)),nspecies(2),format(aflow),paging(0)\"\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--use_aflow.in=": {"optional_attributes": [], "attributes": "XXX", "description": "Uses XXX instead of \"aflow.in\" in searching/running/operating directories.\nThe option is very useful for compounded calculations.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--aflowin": {"optional_attributes": [], "attributes": [], "description": "Output the structure inside the strings:\n[VASP_POSCAR_MODE_EXPLICIT]START\nstructure...\n[VASP_POSCAR_MODE_EXPLICIT]STOP\nwhich is useful if you want to recycle partially ran aflow.in !\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--aflow_proto=": {"optional_attributes": [":speciesB*", ":volumeA*", [":volumeB*"], "|:volume"], "attributes": "label*:speciesA*", "description": "Creates automatic aflow.in.\nOPTIONS are:\n--usage\n--potential=pot_LDA | pot_GGA | potpaw_LDA | potpaw_GGA | potpaw_PBE | potpaw_LDA_KIN | potpaw_PBE_KIN \n--potential_complete\n--missing\n--noautopp\n--bader (default: DEFAULT_VASP_FORCE_OPTION_BADER)\n--spin_remove_relax_1 (default: DEFAULT_VASP_FORCE_OPTION_SPIN_REMOVE_RELAX_1)\n--spin_remove_relax_2 (default: DEFAULT_VASP_FORCE_OPTION_SPIN_REMOVE_RELAX_2)\n--kscheme=[M | G] (default: DEFAULT_KSCHEME in .aflow.rc) --kscheme_static=[M | G] (default: DEFAULT_KSCHEME_STATIC in .aflow.rc)\n--kppra=NNNN (default: DEFAULT_KPPRA in .aflow.rc) --kppra_static=NNNN (default: DEFAULT_KPPRA_STATIC in .aflow.rc) --bands_grid=NNNN (default: DEFAULT_BANDS_GRID in .aflow.rc)\n--enmax_multiply=NNNN (default: DEFAULT_VASP_PREC_ENMAX_HIGH in .aflow.rc, DEFAULT_VASP_PREC_ENMAX_ACCURATE  in .aflow.rc)\n--pressure=0,1,2  (string of kB pressures separated by commas)\n--module=[APL | QHA | AAPL]\n--apl_supercell=NxNxN\n--potim=XXX (default: DEFAULT_VASP_PREC_POTIM in .aflow.rc)  (VASP) \n--relax_type=[ALL | IONS | CELL_SHAPE | CELL_VOLUME | IONS_CELL_VOLUME] (overrides relax_mode) (VASP)\n--relax_mode=[ENERGY | FORCES | ENERGY_FORCES | FORCES_ENERGY] (default: DEFAULT_VASP_FORCE_OPTION_RELAX_MODE_SCHEME in .aflow.rc) (VASP)\n--relax_count=XX (default: DEFAULT_VASP_FORCE_OPTION_RELAX_COUNT in .aflow.rc) (VASP)\n--run_relax_static\n--run_relax_static_bands\n--precision=[(LOW | MEDIUM | NORMAL | HIGH | ACCURATE), PRESERVED] (default: DEFAULT_VASP_FORCE_OPTION_PREC_SCHEME in .aflow.rc) (VASP)\n--metagga=[TPSS | RTPSS | M06L | MBJL | SCAN | MS0 | MS1 | MS2 | NONE] (default: DEFAULT_VASP_FORCE_OPTION_METAGGA_SCHEME in .aflow.rc) (VASP)\n--ivdw=[number_for_VASP_see_manual_for_IVDW | 0] (default: DEFAULT_VASP_FORCE_OPTION_IVDW_SCHEME in .aflow.rc) (VASP)\n--algorithm=[(NORMAL | VERYFAST | FAST | ALL | DAMPED), PRESERVED] (default: DEFAULT_VASP_FORCE_OPTION_ALGO_SCHEME in .aflow.rc) (VASP)\n--type=[METAL | INSULATOR | SEMICONDUCTOR | DEFAULT] (default: DEFAULT_VASP_FORCE_OPTION_TYPE_SCHEME in .aflow.rc) (VASP)\n--convert_unit_cell= (SPRIM, SCONV, NIGGLI, MINK, INCELL, COMPACT, WS, CART, FRAC, PRES)\n--volume_plus_equal=XXX \n--volume_multiply_equal=XXX\n--volume_preserved\n--ediffg=XXX (default: DEFAULT_VASP_PREC_EDIFFG_XXXX in .aflow.rc)  (VASP) \n--ldau2  \n--noldau2  \n--bands\n--neglect_nomix\n--stdout\n--qe\n--abinit\n--aims\n--list\n--params=....  { check aflow --readme=anrl }\n--hex          { check aflow --readme=anrl }\n\nThis command generates the directory: ./AFLOWDATA/speciesAspeciesB/label/\nand create an aflow.in inside with the \"label\" structure from\nHTQC library project, with speciesAs, speciesBs,.. and the volumes per atoms,\nvolumeAs, volumeBs,.. (real in A^3).\nAflow generates a huge number, #speciesAs*#speciesBs...*#label[*#pressures],\nof directories containing all the combinations of\n./AFLOWDATA/speciesAspeciesB../label:pressure\nand so on. This is helpful for generating huge databases.\n\nBe careful to include the various \"_pv,_sv, etc\" in the species so that\nthe POTCAR makes sense.\nHIGH-THROUGHPUT NOTE: label, speciesA, speciesB, volumeA, volumeB can be\nmultiple strings separated by commas without spaces in between such as\nNote that that --aflow_proto label A B ... is not supported anymore and you now need to use\n--aflow_proto=label:A:B... et cetera.\n\nLABEL\nlabel* = string of label1,label2,label3,... separated by commas \",\"\nspecify which labels/prototypes to generate\n\nSPECIES\nspeciesA* = string of speciesA1,speciesA2,speciesA3,... separated by commas \",\"\nspecify which species in position A to consider.\nspeciesB* = string of speciesB1,speciesB2,speciesB3,... separated by commas \",\"\nspecify which species in position B to consider.\nsimilarily you can have speciesC*,speciesD*, and so on.\n\nVOLUMES\nvolumeA* = string of volumeA1,volumeA2,volumeA3,... separated by commas \",\"\nspecify the volumes of speciesAs, the number must be identical to the number\nof speciesAs otherwise you get an error.\nvolumeB* = string of volumeB1,volumeB2,volumeB3,... separated by commas \",\"\nspecify the volumes of speciesBs, the number must be identical to the number\nof speciesBs otherwise you get an error.\nsimilarily you can have volumeC*,volumeD*, and so on.\nIf you want to set one volume per atom, identical to all the species, then\nspecify only one number as species...:volume .\n\nUSAGE\nWith --usage a brief syntax help comes out.\n\nPOTENTIALS\nThe user can specify the potential type.\n--potential=pot_LDA | pot_GGA | potpaw_LDA | potpaw_GGA | potpaw_PBE | potpaw_LDA_KIN | potpaw_PBE_KIN \nIf not specified it takes potpaw_PBE and the standard default for the species.\nWith --potential_complete it creates the subdirectory containing the type and\ndate of the potentials: i.e. Ti_sv => Ti_sv:PAW_GGA:07Sep2000\nWith the option --noautopp, then you have to be careful to include the various\n\"_pv,_sv, etc\" in the species so that the POTCAR makes sense.\n\nMISSING\nWith the option --missing  it creates automatic aflow.in only for the missing .\nstructures of the database. It checks on:\n$(vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_LIB0))/LIB/        of AFLOW_MATERIALS_SERVER\n$(vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_LIB1))/LIB/        of AFLOW_MATERIALS_SERVER\n$(vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_LIB2))/LIB/        of AFLOW_MATERIALS_SERVER\n$(vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_LIB3))/LIB/        of AFLOW_MATERIALS_SERVER\n$(vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_LIB4))/LIB/        of AFLOW_MATERIALS_SERVER\n$(vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_LIB5))/LIB/        of AFLOW_MATERIALS_SERVER\n$(vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_LIB6))/LIB/        of AFLOW_MATERIALS_SERVER\n$(vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_LIB7))/LIB/        of AFLOW_MATERIALS_SERVER\n$(vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_LIB8))/LIB/        of AFLOW_MATERIALS_SERVER\n$(vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_LIB9))/LIB/        of AFLOW_MATERIALS_SERVER\n$(vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_ICSD))/LIB/        of AFLOW_MATERIALS_SERVER\n\nBADER CALCULATION\nWith --bader, the proper flags are set in the INCAR to write the AECCAR's for the bader calculation.\n\nSPIN_REMOVE_RELAX_1 _2\nWith --spin_remove_relax_1 _2, the user can indicate when to avoid a spin-polarized calculation if\nthe system's magnetic moment is negligible.\n\nKPOINTS SPECIFICATION\nWith --kppra=NNN the user can specify a NNN number of kpoints per reciprocal atom.\nInput KPPRA (6,000-10,000 recommended) is the lower bound of the product of the \n(total count of k-points in the 3-D grid) and \n(number of atoms in the cell). \nThe smallest mesh to satisfy this requirement is calculated. \nEffectively, cells with more atoms will yield smaller grid meshes.\nThe user can also specify the scheme with --kscheme=[M | G].\nThe static variants can also be set via command-line.\n\nPRESSURE CALCULATIONS\nThe user can run calculations under pressure by adding --pressure (kB).\n--pressure=p0[,p1][,p1]...\nExample\n--pressure=10,20,30\nThen the data will be generated as directories containing all the combinations of\n./AFLOWDATA/specieAspecieB/label:P=p0/\n./AFLOWDATA/specieAspecieB/label:P=p1/\nThe input file aflow.in will contain the correct PSTRESS=** entry\n\nBANDS CALCULATIONS\nThe user can run bands by adding --bands\n\nMODULE PARAMETERS\nThe user can set up a module-specific run by adding --module=MODULE, where\ncurrent options include APL (harmonic phonon analysis), QHA (quasi-harmonic phonon analysis),\nand AAPL (anharmonic phonon analysis).\nThis option will, e.g., uncomment [AFLOW_APL]CALC.\n[APL | QHA | AAPL]\n\nAPL MODULE PARAMETERS\nUse --apl_supercell=NxNxN to override MINATOMS tag and set the supercell size\n\nPOTIM PARAMETER\nFor some systems VASP requires POTIM smaller than the default\n0.5. See the VASP Manual.\n\nRELAX_TYPE\nOne of the RELAX_TYPEs specified in the AFLOW manual (VASP only).\n[ALL | IONS | CELL_SHAPE | CELL_VOLUME | IONS_CELL_VOLUME] (overrides RELAX_MODE)\n\nRELAX_MODE\nOne of the RELAX_MODEs specified in the AFLOW manual (VASP only).\n[ENERGY | FORCES | ENERGY_FORCES | FORCES_ENERGY] (default: DEFAULT_VASP_FORCE_OPTION_RELAX_MODE_SCHEME in .aflow.rc)\n\nRELAX_COUNT\nSet the number of relaxations (VASP only).\n(default: DEFAULT_VASP_FORCE_OPTION_RELAX_MODE_SCHEME in .aflow.rc)\n\nRUN_RELAX_STATIC\nRun relaxation (geometry) and static (DOS) runs (VASP only).\n\nRUN_RELAX_STATIC_BANDS\nRun relaxation (geometry), static (DOS), and bands (band structure) runs (VASP only).\n\nPRECISION\nOne of the PRECISIONs specified in the AFLOW manual (VASP only).\n[(LOW | MEDIUM | NORMAL | HIGH | ACCURATE), PRESERVED] (default: DEFAULT_VASP_FORCE_OPTION_PREC_SCHEME in .aflow.rc)\n\nALGORITHM\nOne of the ALGORITHMs specified in the AFLOW manual (VASP only).\n[(NORMAL | VERYFAST | FAST | ALL | DAMPED), PRESERVED] (default: DEFAULT_VASP_FORCE_OPTION_ALGO_SCHEME in .aflow.rc)\n\nTYPE\nOne of the TYPEs specified in the AFLOW manual (VASP only).\n[METAL | INSULATOR | SEMICONDUCTOR | DEFAULT] (default: DEFAULT_VASP_FORCE_OPTION_TYPE_SCHEME in .aflow.rc)\n\nCONVERT_UNIT_CELL\nOne of the CONVERSIONs specified in the AFLOW manual (VASP only).\n[SPRIM, SCONV, NIGGLI, MINK, INCELL, COMPACT, WS, CART, FRAC, PRES]\n\nVOLUME CHANGES\nVolume plus equal adds XXX to the current volume.\nVolume multiply equal multiplies XXX to the current volume.\nAvoid any volume changes with --volume_preserved tag\n\n\nPOTIM\n--potim=XXX parameter overrides the default value (default: DEFAULT_VASP_PREC_POTIM in .aflow.rc) for appropriate ionic steps.\n\nEDIFFG\n--ediffg=XXX parameter overrides the default value (default: DEFAULT_VASP_PREC_EDIFFG_XXXX in .aflow.rc) for very precise relaxed forces calculations.\n\nLDAU CALCULATIONS (FORCING IT ON AND OFF)\nThe user can run bands by adding --ldau2 and the code will take the default ldau\nparameters that are specified inside aflow_avasp.cpp.\nIf you do not like them, you can modify the cpp code OR change the lines inside aflow.in\n[VASP_FORCE_OPTION]LDAU2=ON\n[VASP_FORCE_OPTION]LDAU_PARAMETERS=Bi,Li,Zn;1,-1,2;0,0,7.5;0,0,0 // species;Ls;Us;Js\nFor some reference systems, LDAU is taken by default. Then the user can remove it\nwith --noldau.\n\nMIXING (TO MIX OR NOT TO MIX)\nSome systems is known to be no-mix, and they will be skipped from the calculations.\nTo override this automatism, specify --neglect_nomix .\n\nSTDOUT output\nIf you specify --stdout, aflow will not write the file but print on the screen.\n\nQUANTUM ESPRESSO output                                                                     \nIf you specify --qe, aflow will add QUANTUM ESPRESSO code to aflow.in (experimental).   \n\nABINIT output                                                                     \nIf you specify --abinit, aflow will add ABINIT code to aflow.in (experimental).   \n\nAIMS output                                                                     \nIf you specify --aims, aflow will add AIMS code to aflow.in (experimental).   \n\nLIST output\nIf you specify --list, aflow will not generate the aflow.ins but only report the\nones to be created (useful for scripting).\n\nANRL: AFLOW NAVAL RESEARCH LAB PROTOTYPE LIBRARY\nWith respect to the article:\nMehl et al., \"The AFLOW Library of Crystallographic Prototype\", https://arxiv.org/abs/1607.02532\nthe code gives the possibility to define the parameters of the cell --params=...\nSome rhombohedral cells can be generated in hexagonal configurations (see the article).\nThe choice is performed with the flag --hex.\nCheck aflow --readme=anrl\n\naflow --aflow_proto=label[:]specieA[:]specieB[:]volume\nSame as above but the volume per atoms are extracted from the\nmost dense paw_pbe values (usually the ground state) and with\nthe Vegard`s law  (Vegard's law is an approximate empirical rule\nwhich holds that a linear relation exists, at constant temperature,\nbetween the crystal lattice constant of an alloy and the\nconcentrations of the constituent elements).\nHIGH-THROUGHPUT NOTE: label, specieA, specieB can be\nmultiple strings separated by commas without spaces in between such as\nlabel1,label2,label3          generate all the labels\nspecieA1,specieA2,specieA3    goes through all specieAs times all Bs\nspecieB1,specieB2             goes through all specieBs times all As\nIn this case aflow generates a huge number, #labels*#specieAs*#specieB\nof directories containing all the combinations of\n./AFLOWDATA/specieA?specieB?/label?\nand so on. This is helpful for generating huge databases.\nPRESSURE, POTENTIALS, BANDS calculations are allowed, see above.\nSTDOUT option available.\n\n\n", "additional_flags": {"--params": {}}, "mandatory commands": {}, "equivalent commands": []}, "--aflowSG": {"optional_attributes": ["tolerance | =tight | =loose"], "attributes": [], "description": "Calculates the space group of the crystal in the ITC convention.\nNo assumptions are made on the input POSCAR-- may be supercell, primitive, etc.\nGives the Bravais lattice, crystal system, point group, space group number and wyckoff set.\nThe origin choice is always the first choice in ITC 5th edition. This is the highest symmetry\nchoice. (However, for Monoclinic systems, different unique axes and cell choices are examined to\nensure a spacegroup is identified.) This routine consists of an adaptive tolerance; if any symmetry \nrules are broken, the tolerance is changed and everything is recalculated.\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must be below the minimum \ninteratomic distance, otherwise an error will be thrown.)\nCan be called inside aflow via:\nxstructure.SpaceGroup_ITC()        (default tolerance)\nxstructure.SpaceGroup_ITC(tol)     (user defined tolerance)\nAFLOW counterpart to platonSG and findsymSG.\nMagnetic analysis:\nThe magnetic tag specifies the magnetic moment on each of the atoms.  The\ntwo input formats are a comma separated string of the magnetic moments -\nin the same order as the input file, the location of the INCAR, or the location \nof the OUTCAR, which is then read and the magnetic moment for each atom is found \n(must be a static calculation, otherwise this information isn't specified).\nWorks for both collinear and non-collinear systems (AFLOW autodetects \ncollinear/non-collinear based on the input).\nOptions:\n[--no_scan] : Will not perform tolerance scan.\n[--mag|--magnetic|--magmom=[m1,m2,...|INCAR|OUTCAR]]: Perform symmetry analysis of spin system, where spin degree of freedom breaks symmetry \nCheck aflow --readme=symmetry\n\n", "additional_flags": {"--no_scan": {}, "--mag": {}, "--magnetic": {}, "--magmom": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--alphabetic": {"optional_attributes": [], "attributes": [], "description": "Makes the structure in alphabetic order (if possible).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--alpha_compound=": {"optional_attributes": [], "attributes": "string1,string2,.... ", "description": "Makes the alphabetic \"compound\" from the name of string. For instance\naflow --alpha_compound=Zr15.6Ag2Mg14\nreturns Ag2Mg14Zr15.6\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--alpha_species=": {"optional_attributes": [], "attributes": "string1,string2,.... ", "description": "Makes the alphabetic \"species\" from the name of string. For instance\naflow --alpha_species=Zr15.6Ag2Mg14\nreturns AgMgZr\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--analyze_database": {"optional_attributes": [], "attributes": [], "description": "Outputs the statistics of the AFLOW database file into a JSON file. The\nlocations of the files needs to be defined in the .aflow.rc file.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--angle=": {"optional_attributes": [], "attributes": "cutoff ", "description": "Outputs to standard out the angles for each atom triplet\nmade up of neighors within a distance cutoff of each other.  \nActually, since this can be huge, only the first MAX_NUM_ANGLE-1\nneighbours within d are used.  MAX_NUM_ANGLE=21 at present and\ncan be set in aflow_pflow_print.cpp\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR  "]}, "--bader": {"optional_attributes": [], "attributes": [], "description": "options:\n[ --usage ]\n[ --critical_points|--cp ]\n[ --calculate=|--calc=bader|voronoi ]\n[ --nocalculate=|--nocalc=bader|voronoi ]\n[ --partition=|--part=neargrid|ongrid ]\n[ --refine_edge_method=|--rem=-1|-2|-3 ]\n[ --reference=|--ref=REF_FILE ]\n[ --vacuum=|--vac=off|auto|DENSITY_THRESHOLD ]\n[ --terminate=|--term=known|max ]\n[ --print_all=atom|bader|both ]\n[ --print_index=|--print_idx=atom|bader|both ]\n[ --print_select_atom=|--print_sel_atom=[LIST OR RANGE] ]\n[ --print_select_bader=|--print_sel_bader=[LIST OR RANGE] ]\n[ --print_sum_atom=[LIST OR RANGE] ]\n[ --print_sum_bader=[LIST OR RANGE] ]\n[ --quiet|--q ]\n[ --consolidate_atoms2species|--a2s ]\n[ --remove_bader_atoms|--rba ]\n[ --jvxl_all_species=|--jvxl=CUTOFF1,CUTOFF2...[::DOWNSAMPLE1,DOWNSAMPLE2,..]\n|CUTOFF1[,DOWNSAMPLE1:CUTOFF2,DOWNSAMPLE2:...]\n|CUTOFF[,DOWNSAMPLE] ]\n[ --keep=jvxl_only|--jvxl_only ]\n[ -D DIRECTORY ]\n\nPerform Bader charge analysis by means of FORTRAN code from the Henkelman Group\nat UT, Austin. http://theory.cm.utexas.edu/bader/\n\nDIRECTORY is the path to the data from VASP. \nIf this is omitted, it will assume the desired path is the one from which the \ncommand is called.\nThe following files are required to be present in DIRECTORY:\nCHGCAR.static|CHGCAR\nOUTCAR.static|OUTCAR\nPOSCAR.static|POSCAR\n[ AECCAR0.static|AECCAR0 ]  }   OR A CORRESPONDING REFERENCE CHARGE DENSITY FILE \n[ AECCAR2.static|AECCAR2 ]  }   (explained below)\nthough they can be compressed as .bz2, .gz or .xz files.\n\nDescription of flags and, if applicable, corresponding bader code command:\n\n--calculate=|--calc=bader|voronoi\n--nocalculate=|--nocalc=bader|voronoi\n[ corresponding bader code command:  -c | -n  < bader | voronoi > ]\nTurn on [-c] or off [-n] the following calculations\nbader: Bader atoms in molecules (default)\nvoronoi: population analysis based on distance\nWARNING: If you specify --nocalc=bader without a --calc command, the bader \ncode is not expected to produce any files. \nIt is sufficient to specify --calc=voronoi without --nocalc=bader.\nEXPECTED FILES: ACF.dat, AVF.dat, BCF.dat, LABEL_abader.out (net charges \nand atomic volumes calculated from bader code).\n\n--partition=|--part=neargrid|ongrid\n[ corresponding bader code command -b < neargrid | ongrid > ]\nUse the default near-grid bader partitioning or the\noriginal on-grid based algorithm.\n\n--refine_edge_method=|--rem=-1|-2|-3\n[ corresponding bader code command -r < refine_edge_method > ]\nBy default (-r -1) , only the points around reassigned\npoints are checked during refinements. The old method,\nwhich checks every edge point during each refinement, can\nbe enabled using the -r -2 switch:\nA new weight method developed by Yu and Trinkle and be\nenabled with the -r -3 switch.\n\n--reference=|--ref=REF_FILE\n[ corresponding bader code command -ref REF_FILE ]\nBy default, AFLOW will sum the AECCAR0 and AECCAR2 to form the aflow.CHGCAR_sum file.  \nHowever, this can be overridden by specifying a desired reference file.\nEXPECTED FILES: aflow.CHGCAR_sum\n\n--vacuum=|--vac=off|auto|DENSITY_THRESHOLD\n[ corresponding bader code command -vac < off | auto | vacuum_density > ]\nAssign low density points to vacuum.\nauto: vacuum density cutoff is 1E-3 e/Ang^3 (by default in AFLOW)\noff: do not assign low density points to a vacuum volume\nDENSITY_THRESHOLD: a float designating the maximum density assigned to a vacuum volume\n\n--terminate=|--term=known|max\n[ corresponding bader code command -m < known | max > ]\nDetermine how trajectories terminate\nknown: stop when a point is surrounded by known points\nmax: stop only when a charge density maximum is reached\n\n--print_all=atom|bader|both\n[ corresponding bader code command -p < all_atom | all_bader > ]\nPrint calculated volumes (containing charge above threshold of 0.0001 electrons)\natom: all atomic volumes\nbader: all Bader volumes \nEXPECTED FILES: BvAtxxxx.dat/Bvolxxxx.dat\n\n--print_index=|--print_idx=atom|bader|both\n[ corresponding bader code command -p < atom_index | bader_index > ]\nPrint corresponding volume index\natom: atomic volume index\nbader: bader volume index\nEXPECTED FILES: AtIndex.dat/BvIndex.dat\n\n--print_select_atom=|--print_sel_atom=[LIST OR RANGE]\n[ corresponding bader code command -p sel_atom [LIST OR RANGE] ]\nPrint specified atomic volumes.  \nList or range corresponds to 1,2,3 (comma-separated) or 1-3 (hyphen-separated).\nEXPECTED FILES: BvAtxxxx.dat\n\n--print_select_bader=|--print_sel_bader=[LIST OR RANGE]\n[ corresponding bader code command -p sel_bader [LIST OR RANGE] ]\nPrint specified bader volumes.\nList or range corresponds to 1,2,3 (comma-separated) or 1-3 (hyphen-separated).\nEXPECTED FILES: B_wexxxx.dat (artifact of bader code)\n\n--print_sum_atom=[LIST OR RANGE]\n[ corresponding bader code command -p sum_atom [LIST OR RANGE] ]\nPrint sum of specified atomic volumes.\nConsider using aflow --chgsum command instead.    \nList or range corresponds to 1,2,3 (comma-separated) or 1-3 (hyphen-separated).\nEXPECTED FILES: BvAt_summed.at\n\n--print_sum_bader=[LIST OR RANGE]\n[ corresponding bader code command -p sum_bader [LIST OR RANGE] ]\nPrint sum of specified bader volumes.\nConsider using aflow --chgsum command instead.    \nList or range corresponds to 1,2,3 (comma-separated) or 1-3 (hyphen-separated).\nEXPECTED FILES: Bvol_summed.at\n\n--quiet|--q\nNo output printed to screen.\n\n--consolidate_atoms2species|--a2s\nCombine all atomic volumes to form species volumes.\nEXPECTED FILES: BvAt_SPECIES.dat\n\n--remove_bader_atoms|--rba\nRemove individual atomic volumes. \nUseful if you only want to keep species volumes.\nOnly read if --a2s specified.\n\n--jvxl_all_species=|--jvxl=CUTOFF1,CUTOFF2...[::DOWNSAMPLE1,DOWNSAMPLE2,..]\n|CUTOFF1[,DOWNSAMPLE1:CUTOFF2,DOWNSAMPLE2:...]\n|CUTOFF[,DOWNSAMPLE]\nGenerate .jvxl files of all species volumes at the specified cutoffs.\nA .jvxl file is a space-efficient file format for surface charges read by Jmol.\nSee http://chemapps.stolaf.edu/jmol/docs/misc/JVXL-format.pdf.\nYou may also specify a downsample ratio. \nThis will reduce the number of points on the surface by the specified factor.\nYou may produce multiple .jvxl files in the following ways:\nCYCLIC MODE (::)\nEvery combination of cutoff [and downsample_ratio] will be produced\nSETS MODE (:)\nProvide sets of cutoff [and corresponding downsample_ratio] to be produced\nWARNING: while you may specify a cutoff of arbitrary precision, the label of the \noutput file will only show precision to the nearest hundredth.\nEXPECTED FILES: LABEL_Bader_CUTOFF_DOWNSAMPLE_RATIO_SPECIES.jvxl\n\n--keep=jvxl_only|--jvxl_only\nAfter producing .jvxl files, remove atomic and species volume files.\nOnly read if --jvxl specified.\n\nNOTE:  \n\nMultiple print command can be issued, with the exception of:\n--print_all=atom && --print_sel_atom=[LIST OR RANGE]\n--print_all=bader && --print_sel_bader=[LIST OR RANGE]\nBy default, the program will ignore the latter command and only \nexecute the former (--print_all).\n\nAll CHG files printed from bader code will have its header amended\nso that it may be read by Jmol.\nSee --prepare_chgcar_4_jmol command for more information.\n\nBader Charge code reference:\nhttp://theory.cm.utexas.edu/henkelman/code/bader/\nW. Tang, E. Sanville, and G. Henkelman. J. Phys.: Condens. Matter 21, 084204 (2009). \nE. Sanville, S. D. Kenny, R. Smith, and G. Henkelman. J. Comp. Chem. 28, 899-908 (2007). \nG. Henkelman, A. Arnaldsson, and H. Jonsson. Comput. Mater. Sci. 36, 254-360 (2006).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--bandgap": {"optional_attributes": ["bands_directory1"], "attributes": [], "description": "Calculates the energy gap and band edges of a material by looking at the occupancies in the OUTCAR file.\nOn output it produces the following background system information:\nSystem      : The system name, identical to the SYSTEM tag in the OUTCAR.\nSpin tag    : Whether it is a spin polarized / unpolarized calculation.\nFermi level : Obtained from the E-fermi tag in the OUTCAR.\n-----------------------\nThe energy gap (Egap) and band edges (Valence Band Top, VBT, and Conduction Band Bottom, CBB) are then\noutput in table format, with 5 signficant figures.\n-----------------------\nUnpolarized example:\nVBT           CBB           Egap         Type\nNet Result    :   0.0000e-00    0.0000e+00   +0.0000e+00   insulator_direct    \n-----------------------\nPolarized example:\nVBT           CBB           Egap         Type\nMajority Spin :   0.0000e+00    0.0000e+00    0.0000e+00   insulator_indirect  \nMinority Spin :  -1.0000e+00   -1.0000e+00   -1.0000e+09   metal               \nNet Result    :   0.0000e+00    0.0000e+00    0.0000e+00   insulator_direct    \n-----------------------\nSpecial for metallic materials: the edges are arbitrarily set to -1 and the gap is arbitrarily set to\n-1.0E-09. The \"Net Result\" is the overall gap and edges of the system. Note that the band edges have been \nreferenced to the Fermi energy.\n-----------------------\nThere are several meaningful tags (separated by \"_\") provided under \"Type\", including:\n(half-)metal:     no band gap present in at least one of the spin-channels\ninsulator:        band gap present\n(in)/direct:      issued for insulators, specifies whether VBT and CBB come from the same k-point\nzero-gap:         issued for insulators with a negligible gap (tol===1e-4 eV)\nspin-polarized:   issued for spin-polarized insulators where VBT and CBB come from different spin-channels\nempty(-partial):  issued for materials where no band edge is detected for at least a single k-point (OBSOLETE, warning issued now)\n-----------------------\nSample output for a Spin-polarized material, Cr1O2_ICSD_186838:\nSystem        :   Cr1O2_ICSD_186838\nSpin tag      :   2  \nFermi level   :  +5.2091e+00\nVBT           CBB           Egap          Egap_fit     Type\nMajority Spin :  -1.0000e+00   -1.0000e+00   -1.0000e+09   -1.0000e+09   metal\nMinority Spin :  -4.9230e-01   +2.1851e+00   +2.6774e+00   +4.5221e+00   insulator-indirect\nNet Result    :  -1.0000e+00   -1.0000e+00   -1.0000e+09   -1.0000e+09   half-metal\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--bandgaps": {"optional_attributes": [], "attributes": [], "description": "Similar to --bandgap, the directories of bands runs are stored in\nfile \"dirlist\", one directory per line\n(see also --calculated=bandgaps)\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" dirlist"]}, "--bands=": {"optional_attributes": [], "attributes": "PROOUT ", "description": "Outputs the up and down bands to band.up.out and band.dn.out.\nFormat is\nk-space path length (true, fractional), bands (up or down),\nnkpt, kx, ky, kz\nUses data in PROOUT file.  Uses POSCAR to get lattice to calculate\ntrue recipricol distances.  Must run vasp with LORBIT=2 to get\nthe PROOUT file.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--bs": {"optional_attributes": [], "attributes": [], "description": "Given a calculation with all the parts (static,bands) creates the\nsubdirectory BANDS with the band structures files.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--band_structures"]}, "--bzdirections": {"optional_attributes": [], "attributes": [], "description": "Calculates lattice and print a nice looking KPOINTS in VASP format\nfor the AFLOW standard lattice (Setyawan and Curtarolo, 2010). \nOptions:\n[--transform2original]: Use this option if you need consistent labels for reciprocal lattice points \nof a non-standard AFLOW lattice. \nFor low symmetry space groups several equivalent cell choices exist \nand k-point labels must be transformed accordingly. \nIf the metric tensor of your cell choice and the AFLOW standard lattice \ndiffer this option will transform the AFLOW standard k-points labels/path \nback to your cell choice. (addition suggested by Prof. B. Kiefer) \n[--print_transformation_matrix]: Print the transformation matrices P and Q(=P^1) with output.\n(addition suggested by Prof. B. Kiefer)\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--bzd"], "inputs": [" POSCAR"]}, "--bzdirections=": {"optional_attributes": [], "attributes": " | ", "description": "Print a nice looking KPOINTS in VASP format for one of the lattices,\nwhere the lattices are in their conventional-primitive form (kpoints\nare fractional of the reciprical lattice of the CONVENTIONAL primitive).\nLATTICES = (the ones with \"\") \n1. TRI order: kalpha,kbeta,kgamma  > 90 (kgamma<kalpha, kgamma<kbeta) \nor kalpha,kbeta,kgamma  < 90 (kgamma>kalpha, kgamma>kbeta) \nspecial case when kgamma=90 \n\"TRI1a\" kalpha>90 kbeta>90 kgamma>90 \n\"TRI1b\" kalpha<90 kbeta<90 kgamma<90 \n\"TRI2a\" kalpha>90 kbeta>90 kgamma=90 \n\"TRI2b\" kalpha<90 kbeta<90 kgamma=90 \n2. \"MCL\" unique (order b<=c) \n3. MCLC (order alpha<90) \n\"MCLC1\"  kgamma>90 \n\"MCLC2\"  kgamma=90 \n\"MCLC3\"  kgamma<90, b*cos(alpha)/c + (b*sin(alpha)/a)^2 < 1 \n\"MCLC4\"  kgamma<90, b*cos(alpha)/c + (b*sin(alpha)/a)^2 = 1 \n\"MCLC5\"  kgamma<90, b*cos(alpha)/c + (b*sin(alpha)/a)^2 > 1 \n4. \"ORC\" unique (order a<b<c) \n5. \"ORCC\" unique (order a<b) \n6. ORCF (order a<b<c) \n\"ORCF1\" \"ORCF_invb2+invc2<inva2\"  for 1/a^2 > 1/b^2 + 1/c^2 \n\"ORCF2\" \"ORCF_inva2<invb2+invc2\"  for 1/a^2 < 1/b^2 + 1/c^2 \n\"ORCF3\"                           for 1/a^2 = 1/b^2 + 1/c^2 \n7. \"ORCI\" unique (order a<b<c) \n8. \"TET\" unique (order a a c) \n9. BCT (order a a c) \n\"BCT1\" \"BCT_c<a\" for c<a \n\"BCT2\" \"BCT_c>a\" for c>a \n10. \"RHL1\" alpha<90 \n\"RHL2\" alpha>90 \n11. \"HEX\" unique (order 60 90 90) \n12. \"CUB\" unique \n13. \"FCC\" unique (order 60 60 60) \n14. \"BCC\" unique \n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--bzd"]}, "--BZmax": {"optional_attributes": [], "attributes": [], "description": "Calculates the distance between high-symmetry K points and Gamma point\nin the reciprocal space, and sorts them.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--bzplot": {"optional_attributes": [], "attributes": [], "description": "Reads POSCAR from stdin and makes brillouin zone image file \"bzplot.eps\" and \"bzplot.png\".\nThe data for plotting is saved in bzplot.dat and the script to make the plot is saved in plotbz.sh.\nplotbz.sh can be modified by hand to make further adjustment of the figure.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--plotbz"], "inputs": [" POSCAR"]}, "--bzplotdata": {"optional_attributes": [], "attributes": [], "description": "Reads POSCAR and generates data for brillouin zone and kpath plotting.\nThe data is outputted to stdout (cout).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR > bzplot.dat"]}, "--bzplotuseKPOINTS=": {"optional_attributes": [], "attributes": "KPOINTS ", "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--bzplotdatauseKPOINTS=": {"optional_attributes": [], "attributes": "KPOINTS ", "description": "Analogous to --bzplot and --bzplotdata respectively, however the first word of the first line\nin KPOINTS file is used as the str_sp.bravais_lattice_variation_type to get the kpath (as opposed to\ndoing --sp of the POSCAR).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR > bzplot.dat"]}, "--cages": {"optional_attributes": ["roughness"], "attributes": [], "description": "Returns the center, radius and coordination (with atoms number)\nof the cages for interstitial defects (SC Nov07).\nIt prints all the cages generated by putting spheres between\nfour, three and two points, stable and metastable respectively.\nAfter finding all the cages (REDUCIBLE) the algorithm removes the\nones symmetrically equivalent (by using the space group calculated\nat the beginning). The cages that are worth simulating are the\nIRREDUCIBLE ones.\nRadius is the radius includeing the scale.\nP is the number of points used to find the sphere.\nC is the coordination of the sphere (the number of atoms on its\nsurface, from radius to radius+roughness.\nT is the label of the irreducible cage. You can see in the last\npart of the output the lables of the reduced cages.\nNOTES: If you specify \"--np=NP\", a concurrent number of NP posix\nthreads will be started to speed the calculation in a multicpu-\nmulticore environent.\n\n", "additional_flags": {"--np": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--calculated=": {"optional_attributes": [], "attributes": "icsd ", "description": "Print one of the available calculated directories (usefull for webs).\n", "additional_flags": {}, "mandatory commands": {"--random": {}}, "equivalent commands": []}, "--calculated": {"optional_attributes": ["all|icsd|lib0|lib1|lib2|lib3|lib4|lib5|lib6|lib7|lib8|lib9"], "attributes": [], "description": "\"all\":  print the total number of calculations in the databases.\n\"icsd\": print the list of calculated ICSD-structures.\n\"lib0\": print the list of calculated pure isolated systems.\n\"lib1\": print the list of calculated pure systems.\n\"lib2\": print the list of calculated binary systems.\n\"lib3\": print the list of calculated ternary systems (magnetic, Heusler projects, etc.)\n\"lib4\": print the list of calculated 4-species systems (very few)\n\"lib5\": print the list of calculated 5-species systems (very few)\n\"lib6\": print the list of calculated 6-species systems (very few)\n\"lib7\": print the list of calculated 6-species systems (very few)\n\"lib8\": print the list of calculated 6-species systems (very few)\n\"lib9\": print the list of calculated 6-species systems (very few)\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--cart": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a new POSCAR file with atom\npositions in cartesian coordinates.\n", "additional_flags": {"-c": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--chgcar2jvxl=": {"optional_attributes": [",CHGCAR2,...", "::DOWNSAMPLE1,DOWNSAMPLE2,..."], "attributes": "|::CUTOFF1,CUTOFF2...", "description": "|CHGCAR1,CUTOFF1[,DOWNSAMPLE1:CHGCAR2,CUTOFF2[,DOWNSAMPLE2:...]]\n|CHGCAR,CUTOFF[,DOWNSAMPLE]\noptions:\n[ --usage ]\n[ --output=|--o=OUTPUT_FILE ]\n\nConverts a surface data file (e.g. CHGCAR file) to a .jvxl file at a specified cutoff.\nSee http://chemapps.stolaf.edu/jmol/docs/misc/JVXL-format.pdf.\nYou may also specify a downsample ratio. \nThis will reduce the number of points on the surface by the specified factor.\nYou may produce multiple .jvxl files in the following ways:\nCYCLIC MODE (::)\nEvery combination of cutoff [and downsample_ratio] will be produced\nSETS MODE (:)\nProvide sets of cutoff [and corresponding downsample_ratio] to be produced\nYou may specify the name of the output file (ending with .jvxl) ONLY if sets are provided.\nWARNING: while you may specify a cutoff of arbitrary precision, the label of the \noutput file will only show precision to the nearest hundredth.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--c2j"]}, "--chgdiff=": {"optional_attributes": [], "attributes": "CHGCAR1,CHGCAR2 ", "description": "options:\n[ --usage ]\n[ --output=|--o=CHGCAR_OUT ]\n\nThis takes the difference between two CHGCAR files, outputting\nCHGCAR1-CHGCAR2.  The output is in the form of a vasp46s  \nCHGCAR.  The output file is aflow_CHGDIFF.out (unless otherwise\nspecified).  \n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--chgsum=": {"optional_attributes": [], "attributes": "CHGCAR1,CHGCAR2,...", "description": "options:\n[ --usage ]\n[ --output=|--o=CHGCAR_OUT ]\n\nThis finds the sum between two or more CHGCAR files.  The output \nis in the form of a vasp46s CHGCAR.  \nThe output file is aflow_CHGSUM.out (unless otherwise\nspecified).  \n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--chgint": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out the integrated charge density around  \nevery atom.  The total integrated density within the Voronoi  \nvolume is given for each atom.  The code also calculates  \nthe integrated density in a surrounding sphere for each atom.  \nThis is output as a function of radius for radii from 0 to 3  \nangstrom in steps of 0.1 angstrom.  The total,Up-Dn,Up,Dn  \ncharges are all integrated although for non-spin polarized  \ncalculations only the first gives new information. The code\nworks on all the recent versions of vasp we have tried but they  \nseem to change the CHGCAR formatting sometimes so it may crash  \non different versions (at least 4.4.1 and 4.4.5 (including PAW)  \nwork).  For a large cell this can take a while (e.g., 80 atoms  \nmight take ~20 minutes).  vasp4631 ok.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--cif": {"optional_attributes": ["tolerance | =tight | =loose"], "attributes": [], "description": "Outputs to standard out a Crystallographic Information File\n(cif) format file based on the POSCAR input file.  \nThis can be used as input for Mercury, and is the preferred  \nformat in Gerd's structure collection.\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must not be below the minimum\ninteratomic distance, otherwise an error will be thrown.)\nSpace group setting:\nThe space group setting can be specified with the optional flag [--setting=1| =2] (the default is setting 1).\nFor rhombohedral systems, setting 1=rhl and 2=hex.\nFor monoclinic systems, setting 1=unique axis-b and 2=unique axis-c.\nOptions:\n[--no_symmetry] : Will not perform symmetry analysis and return the CIF with space group 1.\n", "additional_flags": {"--setting": {}, "--no_symmetry": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--clat=": {"optional_attributes": [], "attributes": "a,b,c,alpha,beta,gamma", "description": "Outputs to standard out the cartesian lattice vectors obtained\nfrom the input a b c alpha beta gamma.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--clean": {"optional_attributes": [], "attributes": [], "description": "Cleans the directory, like aflow --clean --DIRECTORY=DIRECTORY\n\n", "additional_flags": {}, "mandatory commands": {"--DIRECTORY": {}}, "equivalent commands": []}, "--clean_all": {"optional_attributes": [], "attributes": [], "description": "Cleans all the directories. Be careful !\n(if the LIST_DIRECTORIES contain aflow.in and LOCK the substring\ngets removed to help the search).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" LIST_DIRECTORIES"]}, "--cluster-expansion=": {"optional_attributes": [], "attributes": "... | ", "description": "--ce structure_type A B formation_energy_A formation_energy_B \nCluster expansion\nstructure_type: fcc/bcc/hcp\nA, B: element names\nEA, EB: formation energy of pury element A and B\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--ce"]}, "--cluster=": {"optional_attributes": [], "attributes": "structure_type,atom_num_min,atom_num_max,neighbour_min,neighbour_max", "description": "Get clusters\natom_num_min, atom_num_max : minimum and maximum numbers of atoms in a cluster\nneighbour_min, neighbour_max : minimun and maximum nearest neighbour\npairs including in a cluster\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--cmp_str": {"optional_attributes": [], "attributes": [], "description": "This compares the characteristics of two POSCAR files and is  \nuseful for determining if the files are the same.  Characteristics\ncompared include number of atoms, number of types, total volume,  \nvolume per atom, lattice parameters, number of neighbours of each\npair type out to rcut, differences in bond lengths for neighbours\nof each pair type out to cutoff, and space groups.  For rcut<0 the\ncutoff is set to 4*(Wigner-Seitz radius of each atom) (this is the  \nradius such that num atom spheres occupies the whole volume).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR1 ", " POSCAR2 rcut  "]}, "--compare=": {"optional_attributes": [], "attributes": "a,b,c,d,e,f,g,h,k,j,i,l", "description": "Outputs to standard output the % comparison between\na#g b#h c#k d#j e#i f#l in %  \ncout << abs(a1-a7)/((a1+a7)/2.0) << ;\ncout << abs(a2-a8)/((a2+a8)/2.0) << ;\ncout << abs(a3-a9)/((a3+a9)/2.0) << ;\ncout << abs(a4-a10)/((a4+a10)/2.0) << ;\ncout << abs(a5-a11)/((a5+a11)/2.0) << ;\ncout << abs(a6-a12)/((a6+a12)/2.0) << ;\ncout << endl;\nUseful with y-ndata to compare % relaxations.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--compare2database": {"optional_attributes": [], "attributes": [], "description": "Compares a structure (file) to entries in the AFLOW database, returning similar \ncompounds and quantifying their levels of similarity (misfit values).\nMaterial properties can be extracted from the database and printed (via AFLUX), highlighting structure-property relationships.\n\n[COMPARE2DATABASE_OPTIONS] : Options specific to this command:\n[--structure_comparison] : Performs structure-type comparisons.\n[--properties=enthalpy_atom,natoms,...] : Specify the properties via their API keyword to print the corresponding \nvalues with the comparison results.\n[--catalog=lib1|lib2|lib3|lib4|lib6|lib7|icsd] : Restrict the entries to compare with to a specific catalog/library \n(e.g., `lib1', `lib2', `lib3', `icsd', etc.).\n[--geometry_file=POSCAR.relax1] : Compare geometries from a particular step in the DFT relaxation \n(e.g., `POSCAR.relax1', `POSCAR.relax2', `POSCAR.static', etc.).\n[GENERAL_COMPARISON_OPTIONS] :\n[--np=16|--num_proc=16] : Allocate the number of processors/threads for the task.\n[--optimize_match] : Explore all lattice and origin choices to find the best matching representation, i.e., minimizes misfit value.\n[--no_scale_volume] : Suppresses volume rescaling during structure matching; identifies differences due to volume expansion or compression of a structure.\n[--ignore_symmetry] : Neglects symmetry analysis (both space group and Wyckoff positions) for grouping comparisons.\n[--ignore_Wyckoff] : Neglects Wyckoff symmetry (site symmetry) for filtering comparisons, but considers the space group number.\n[--ignore_environment] : Neglects LFA environment analysis for filtering comparisons.\n[--keep_unmatched!] : Retains misfit information of unmatched structures (i.e., misfit>0.1).\n[--match_to_aflow_prototypes!] : Identifies matching AFLOW prototypes to the representative structure.\n[--magmom=<m1,m2,...|INCAR|OUTCAR>:...] : Specifies the magnetic moment for each structure (collinear or non-collinear) delimited by colons, \nsignaling a magnetic-type comparison. The option does not apply to --compare_structures since the atom type is neglected.\nAFLOW-XtalMatch supports three input formats for the magnetic moment: \n1) explicit declaration via comma-separated string m_{1},m_{2},...m_{n} (m_{1,x},m_{1,y},m_{1,z},m_{2,x},...m_{n,z} for non-collinear) \n2) read from a VASP INCAR, or\n3) read from a VASP OUTCAR.\nAdditional magnetic moment readers for other ab initio codes will be available in future versions.\n[--add_aflow_prototype_designation] : Casts prototype structure into the AFLOW standard designation.\n[--remove_duplicate_compounds] : For structure-type comparisons, duplicate compounds are identified first \n(via a material-type comparison without volume scaling), then remaining unique compounds are compared, removing duplicate bias.\n[--ICSD] : Only if ICSD structures: ensure the representative structure is the entry with the smallest ICSD number \n[--print] : For comparing two structures, additional comparison information is printed, including atom mappings, distances between matched atoms, \nand the transformed structures in the closest matching representation.\n[--print=TEXT|JSON] : For comparing multiple structures, the results printed to the relevant files are formatted into human-readable \ntext or JSON, respectively.  By default, AFLOW-XtalMatch writes the output in both formats.\n[--quiet|--q] : Suppresses the log information for the comparisons.\n[--screen_only] : Prints the comparison results to the screen and does not write to any files.\nCheck aflow --readme=compare\n\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" file"]}, "--compare2prototypes": {"optional_attributes": [], "attributes": [], "description": "Compares a structure (file) to the AFLOW crystallographic prototype structures, returning the similar \nstructures and quantifying their levels of similarity (misfit values).\n\n[COMPARE2PROTOTYPES_OPTIONS] : Options specific to this command:\n[--catalog=anrl|htqc|all] : Restrict the entries to compare with to a specific catalog/library (e.g., `anrl' or `htqc').\n[GENERAL_COMPARISON_OPTIONS] :\n[--np=16|--num_proc=16] : Allocate the number of processors/threads for the task.\n[--optimize_match] : Explore all lattice and origin choices to find the best matching representation, i.e., minimizes misfit value.\n[--no_scale_volume] : Suppresses volume rescaling during structure matching; identifies differences due to volume expansion or compression of a structure.\n[--ignore_symmetry] : Neglects symmetry analysis (both space group and Wyckoff positions) for grouping comparisons.\n[--ignore_Wyckoff] : Neglects Wyckoff symmetry (site symmetry) for filtering comparisons, but considers the space group number.\n[--ignore_environment] : Neglects LFA environment analysis for filtering comparisons.\n[--keep_unmatched!] : Retains misfit information of unmatched structures (i.e., misfit>0.1).\n[--magmom=<m1,m2,...|INCAR|OUTCAR>:...] : Specifies the magnetic moment for each structure (collinear or non-collinear) delimited by colons, \nsignaling a magnetic-type comparison. The option does not apply to --compare_structures since the atom type is neglected.\nAFLOW-XtalMatch supports three input formats for the magnetic moment: \n1) explicit declaration via comma-separated string m_{1},m_{2},...m_{n} (m_{1,x},m_{1,y},m_{1,z},m_{2,x},...m_{n,z} for non-collinear) \n2) read from a VASP INCAR, or\n3) read from a VASP OUTCAR.\nAdditional magnetic moment readers for other ab initio codes will be available in future versions.\n[--add_aflow_prototype_designation] : Casts prototype structure into the AFLOW standard designation.\n[--print=TEXT|JSON] : For comparing multiple structures, the results printed to the relevant files are formatted into human-readable \ntext or JSON, respectively.  By default, AFLOW-XtalMatch writes the output in both formats.\n[--quiet|--q] : Suppresses the log information for the comparisons.\n[--screen_only] : Prints the comparison results to the screen and does not write to any files.\nCheck aflow --readme=compare\n\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" file"]}, "--compare_materials": {"optional_attributes": ["GENERAL_COMPARISON_OPTIONS"], "attributes": "", "description": "Compares compounds comprised of the same atomic species and with \ncommensurate stoichiometric ratios, i.e., material-type comparison, and returns their level of similarity (misfit value).\nThis method identifies unique and duplicate materials.\nThere are three input types:\naflow --compare_materials=<f1>,<f2>,...  : append geometry files (<f1>,<f2>,...) to compare,\naflow --compare_materials -D <path>      : specify path to directory (<path>) containing geometry files to compare, and\naflow --compare_materials -F=<filename>  : specify file (<filename>) containing compounds between delimiters \n[VASP_POSCAR_MODE_EXPLICIT]START and VASP_POSCAR_MODE_EXPLICIT]STOP.\nAdditional delimiters will be included in later versions.\n[GENERAL_COMPARISON_OPTIONS] :\n[--np=16|--num_proc=16] : Allocate the number of processors/threads for the task.\n[--optimize_match] : Explore all lattice and origin choices to find the best matching representation, i.e., minimizes misfit value.\n[--no_scale_volume] : Suppresses volume rescaling during structure matching; identifies differences due to volume expansion or compression of a structure.\n[--ignore_symmetry] : Neglects symmetry analysis (both space group and Wyckoff positions) for grouping comparisons.\n[--ignore_Wyckoff] : Neglects Wyckoff symmetry (site symmetry) for filtering comparisons, but considers the space group number.\n[--ignore_environment] : Neglects LFA environment analysis for filtering comparisons.\n[--keep_unmatched!] : Retains misfit information of unmatched structures (i.e., misfit>0.1).\n[--match_to_aflow_prototypes!] : Identifies matching AFLOW prototypes to the representative structure.\n[--magmom=<m1,m2,...|INCAR|OUTCAR>:...] : Specifies the magnetic moment for each structure (collinear or non-collinear) delimited by colons, \nsignaling a magnetic-type comparison. The option does not apply to --compare_structures since the atom type is neglected.\nAFLOW-XtalMatch supports three input formats for the magnetic moment: \n1) explicit declaration via comma-separated string m_{1},m_{2},...m_{n} (m_{1,x},m_{1,y},m_{1,z},m_{2,x},...m_{n,z} for non-collinear) \n2) read from a VASP INCAR, or\n3) read from a VASP OUTCAR.\nAdditional magnetic moment readers for other ab initio codes will be available in future versions.\n[--add_aflow_prototype_designation] : Casts prototype structure into the AFLOW standard designation.\n[--ICSD] : Only if ICSD structures: ensure the representative structure is the entry with the smallest ICSD number \n[--print] : For comparing two structures, additional comparison information is printed, including atom mappings, distances between matched atoms, \nand the transformed structures in the closest matching representation.\n[--print=TEXT|JSON] : For comparing multiple structures, the results printed to the relevant files are formatted into human-readable \ntext or JSON, respectively.  By default, AFLOW-XtalMatch writes the output in both formats.\n[--quiet|--q] : Suppresses the log information for the comparisons.\n[--screen_only] : Prints the comparison results to the screen and does not write to any files.\nCheck aflow --readme=compare\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["-D", "-F"]}, "--compare_structures": {"optional_attributes": ["GENERAL_COMPARISON_OPTIONS"], "attributes": "", "description": "Compares compounds with commensurate stoichiometric ratios and no \nrequirement of the atomic species, i.e., structure-type comparison, and returns their level of similarity (misfit value).\nThis method identifies unique and duplicate prototypes.\nThere are three input types:\naflow --compare_structures=<f1>,<f2>,...  : append geometry files (<f1>,<f2>,...) to compare,\naflow --compare_structures -D <path>      : specify path to directory (<path>) containing geometry files to compare, and\naflow --compare_structures -F=<filename>  : specify file (<filename>) containing compounds between delimiters \n[VASP_POSCAR_MODE_EXPLICIT]START and VASP_POSCAR_MODE_EXPLICIT]STOP.\nAdditional delimiters will be included in later versions.\n[GENERAL_COMPARISON_OPTIONS]:\n[--np=16|--num_proc=16] : Allocate the number of processors/threads for the task.\n[--optimize_match] : Explore all lattice and origin choices to find the best matching representation, i.e., minimizes misfit value.\n[--no_scale_volume] : Suppresses volume rescaling during structure matching; identifies differences due to volume expansion or compression of a structure.\n[--ignore_symmetry] : Neglects symmetry analysis (both space group and Wyckoff positions) for grouping comparisons.\n[--ignore_Wyckoff] : Neglects Wyckoff symmetry (site symmetry) for filtering comparisons, but considers the space group number.\n[--ignore_environment] : Neglects LFA environment analysis for filtering comparisons.\n[--keep_unmatched!] : Retains misfit information of unmatched structures (i.e., misfit>0.1).\n[--match_to_aflow_prototypes!] : Identifies matching AFLOW prototypes to the representative structure.\n[--add_aflow_prototype_designation] : Casts prototype structure into the AFLOW standard designation.\n[--remove_duplicate_compounds] : For structure-type comparisons, duplicate compounds are identified first \n(via a material-type comparison without volume scaling), then remaining unique compounds are compared, removing duplicate bias.\n[--ICSD] : Only if ICSD structures: ensure the representative structure is the entry with the smallest ICSD number \n[--print] : For comparing two structures, additional comparison information is printed, including atom mappings, distances between matched atoms, \nand the transformed structures in the closest matching representation.\n[--print=TEXT|JSON] : For comparing multiple structures, the results printed to the relevant files are formatted into human-readable \ntext or JSON, respectively.  By default, AFLOW-XtalMatch writes the output in both formats.\n[--quiet|--q] : Suppresses the log information for the comparisons.\n[--screen_only] : Prints the comparison results to the screen and does not write to any files.\nCheck aflow --readme=compare\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["-D", "-F"]}, "--convex_hull=": {"optional_attributes": [",AlCuZn,..."], "attributes": "|", "description": "Queries the AFLOW API for relevant entries (see --load_library), calculates\nthe convex hull, and returns the information as a PDF (default, see --output).\n--chull : Necessary flag for entering mode for calculating convex hull.\n--alloy : Necessary argument, specifies system. This code is not dimension specific, \ni.e., you can calculate the convex hull for any n-ary system.\nThere are two input modes:  raw (comma-separated) and combinatorial (colon- and comma-separated).\nRaw input:  --alloy=MnPdPt,AlCuZn.\nCombinatorial input:  --alloy=Ag,Au:Mn.  This is interpreted as --alloy=AgMn,AuMn.\n[--destination=[DIRECTORY]] : Optional argument, specify the directory for the output.  \nDefault is \"./\".\n[--usage] : Returns usage commands and options.\n[--print=|--p=|--output=|--o=latex|pdf|json|text] : Select the output format. Latex/PDF are the same (.pdf).\nJSON and plain text have the following extensions:  .json and .txt.\nDefault is Latex/PDF.\n[--screen_only] : Output is direct to screen (stdout) instead of writing to a file. \nAll logging output is surpressed.\n[--keep=log|--keep_log|--keeplog|--log] : Prints a log file of relevant output.\n[--keep=tex,log] : Keep both.\n\nLOADING OPTIONS:\n[--load_library=|--loadlibrary=|--ll=icsd|lib1|lib2|lib3] : Specify libraries\nfrom which to load.  Default:  icsd, lib2, and lib3.\n[--load_API|--load_api|--loadapi|--lapi|--api] : Force loading entries from the API (default unless\non nietzsche, aflowlib, or habana.\n[--load_entries_entry_output|--loadentriesentryoutput|--leo] : Get full output for\nall entries loaded from the AFLOW API.\n[--neglect=|--ban=aflow:bb0d45ab555bc208,aflow:fb9eaa58604ce774] :\nBan specific entries from the convex hull calculation, done by AUID.\n[--see_neglect|--seeneglect| --sn] : Show why entries were neglected.\n[--remove_extreme_points=|--removeextremepoints=|--remove_extrema=|--removeextrema=|--rep=-1000] :\nExclude points based on Hf/Ts (floor/ceiling). Units are meV/atom / K.\n[--entropic_temperature|--entropictemperature|--entroptemp] : Calculate the Ts\nconvex hull (upper-half). Default is Hf hull (lower-half).  \n[--include_paw_gga|--paw_gga] : Include calculations run with PAW_GGA. Easily coupled\nwith default PAW_PBE (same level of theory, differently parametrized).\n\nANALYSIS OPTIONS:\n[--distance_to_hull=|--distancetohull=|--distance2hull=|--dist2hull=|--d2h=aflow:bb0d45ab555bc208,aflow:fb9eaa58604ce774] :\nCalculates a structure's distance below/above (Hf/Ts) the hull.\n[--stability_criterion=|--stabilitycriterion=|--stable_criterion=|--scriterion=|--sc=aflow:bb0d45ab555bc208,aflow:fb9eaa58604ce774] :\nCalculates the stability criterion of the ground state structure. Will return\na warning if structure is not a ground state one. It removes the point from the \nhull, calculates the new hull, and calculates the distance of this point from\nbelow/above (Hf/Ts) hull.\n[--hull_formation_enthalpy=|--hull_energy=0.25,0.25] : Returns the value of the convex hull surface at the specified coordinate/concentration.\nFor stoichiometric hulls, provide the reduced composition form, i.e., for the compound Mn2PdPt, use\n--hull_formation_enthalpy=0.5,0.25, where the composition of the last component is implicitly 1-sum(0.5+0.25).\nProviding an additional component (e.g., --dist2hull=0.5,0.25,0.1) results in a rigid shift in the energy axis and,\nthus, a constant added to the final distance calculated (0.1 is in units of eV for formation energy hulls).\n[--skip_structure_comparison|--skipstructruecomparison|--skipstructcomp|--ssc] : structure comparison analysis for determination of\nequivalent ground state structures is skipped (can be time consuming).\n[--skip_stability_criterion_analysis|--skipstabilitycriterionanalysis|--skipscriterion|--sscriterion] : analysis\nof stability criterion for ground state structures is skipped (can be time consuming).\n[--include_skewed_hulls|--include_skewed|--ish] : process hull despite skewed endpoints (abs(ground state endpoint energy) < 15 meV).\n[--include_unreliable_hulls|--include_unreliable|--iuh] : process hull despite poor statistics (binary hull count < 200).\n[--include_outliers|--io] : include any detected outliers (output/warning is still shown).\n[--force] : force output despite warnings.\n\nPDF/LATEX OPTIONS:\n[--image_only|--imageonly|--image] : Latex/PDF output mode only. Similar to --document_only, \nbut the image dimensions are not necessarily for a standard page. Preferred option for \nimporting into papers/presentations.\n[--no_document|--nodocument|--no_doc|--nodoc|--full_page_image|--fullpageimage] :\nLatex/PDF output mode only. Generates a PDF of just the convex hull illustration (2/3D).\nDimensions: 8.5x11 inches (standard page), landscape.\n[--document_only|--documentonly|--doc_only|--doconly|--doc] : Latex/PDF output mode only.\nExclude convex hull illustration. This is the default for quaternary systems and above.\n[--keep=tex|--keep_tex|--keeptex|--tex] : Latex/PDF output mode only. Will keep latex .tex and put it in\n--destination=[DIRECTORY].\n[--latex_output|--latexoutput] : Latex/PDF output mode only. See full latex output.\nGood for troubleshooting.\n[--latex_interactive|--latexinteractive] : Latex/PDF output mode only. Allows you\nto interact with latex as it compiles. Good for troubleshooting.\n[--light_contrast|--lightcontrast|--lc] : Latex/PDF output mode only. Modifies the convex \nhull illustration color scheme to be lighter.\n[--large_font|--largefont|--large|--lf] : Latex/PDF output mode only. Prints a \"larger\" font size \nfor convex hull illustration.\n[--png_resolution=|--pngresolution=|--pngr=300] : Set PNG resolution (-density in convert).\n[--plot_iso_max_latent_heat|--iso_max|--isomax] : Plot iso-max-latent-heat lines for ground state structures.\nSee dx.doi.org/10.1063/1.4902865.\n\nCheck aflow --readme=chull\n\n", "additional_flags": {"--destination": {}}, "mandatory commands": {"--alloy": {}}, "equivalent commands": ["--chull"]}, "--corners": {"optional_attributes": [], "attributes": [], "description": "Add to the POSCAR the corner and face atoms so it looks\ngood when you plot the unit cell with rasmol/jmol and so on..\nThis option is just for visualization and should not be used\nto transform POSCARS to run. You will get super-imposed atoms!\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--corner"], "inputs": [" POSCAR"]}, "--data": {"optional_attributes": ["tolerance| =tight| =loose"], "attributes": [], "description": "Outputs to standard out basic data about the structure in the\nPOSCAR input file. Output includes volume, a b c alpha beta gamma,\nreciprocal lattice, reciprocal lattice volume.\nThis routine consists of symmetry consistency checks. If symmetry rules are broken,\nthe code automatically changes tolerance and recalculates from the beginning.\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must not be below the minimum\ninteratomic distance, otherwise an error will be thrown.)\nOptions:\n[--no_scan] : Will not perform tolerance scan.\n[--print=txt | --print=json] : Specify output format.\n", "additional_flags": {"--no_scan": {}, "--print": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--data1=": {"optional_attributes": [], "attributes": "rcut ", "description": "This is basically like cmp_str except that it works on 1 str.  \nSlightly different data is given: No space groups, All bond lengths.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--data2": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out basic data about the structure in the\nPOSCAR input file. Similar to --data but with another style (SC).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--debye=": {"optional_attributes": [], "attributes": "THERMO", "description": "Usage:  aflow --debye=THERMO[.bz2|.gz|.xz]\nFits Debye temperature to heat capacity data in THERMO[.bz2|.gz|.xz] file as calculated using APL.\nWrites results to file debye_temperature.dat and plots results in debye_temperature.png\nAlso calculates value for Debye temperature which best fits all heat capacity data in the range\ngiven in the THERMO file, and writes this value in the file debye_temperature.dat\nSee Ascroft & Mermin, Solid State Physics, equation 23.26 for expression for heat capacity in terms of debye temperature.\nThe following files must reside in DIRECTORY as in the AFLOW written form or as compressed files.\nTHERMO \naflow.in\nThe aflow.in file is used to determine the number of atoms per unit cell.\nIf the files are found compressed, the compressed files are preserved and temporary files are written and discarded.\nThe generation of the THERMO file is controlled by the command\n[AFLOW_APL]TP\nSee README_APL, especially 3). for more details.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--diff=": {"optional_attributes": [], "attributes": "POSCAR1,POSCAR2", "description": "Gives the difference in energy of the two structures within the PARTIAL OCCUPATION force field.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--disp=": {"optional_attributes": [], "attributes": "cutoff ", "description": "Outputs to standard out the displacement from each atom to all\nneighors within a distance cutoff.  Also gives which unit cell the\nneighbour is in.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--dist=": {"optional_attributes": [], "attributes": "cutoff ", "description": "Outputs to standard out the distances for each atom to all\nneighors within a distance cutoff.  Also gives which unit cell the\nneighbour is in.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--delta_kpoints=": {"optional_attributes": [], "attributes": " | ", "description": "Gives the k1,k2,k3 so that the delta_kappa is less-equal than \"number\".\nInput dK is the desired smallest distance between grid points in reciprocal space. \nThe smallest mesh to satisfy this requirement is calculated.\nSee also --kpoints.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--dkpoints", "-dkpoints", "-dk"], "inputs": [" POSCAR "]}, "--edata": {"optional_attributes": ["tolerance| =tight| =loose"], "attributes": [], "description": "Outputs to standard the information given by --data in addition\nto lattice-, superlattice- and reciprocal-lattice types.\nThis routine consists of symmetry consistency checks. If symmetry rules are broken,\nthe code automatically changes tolerance and recalculates from the beginning.\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must not be below the minimum\ninteratomic distance, otherwise an error will be thrown.)\nSpace group setting:\nThe space group setting can be specified with the optional flag [--setting=1| =2] (the default is setting 1).\nFor rhombohedral systems, setting 1=rhl and 2=hex.\nFor monoclinic systems, setting 1=unique axis-b and 2=unique axis-c.\nMagnetic analysis:\nThe magnetic tag specifies the magnetic moment on each of the atoms.  The\ntwo input formats are a comma separated string of the magnetic moments -\nin the same order as the input file, the location of the INCAR, or the location\nof the OUTCAR, which is then read and the magnetic moment for each atom is found\n(must be a static calculation, otherwise this information isn't specified).\nWorks for both collinear and non-collinear systems (AFLOW autodetects\ncollinear/non-collinear based on the input).\nOptions:\n[--no_scan] : Will not perform tolerance scan.\n[--print=txt | --print=json] : Specify output format.\n[--mag|--magnetic|--magmom=[m1,m2,...|INCAR|OUTCAR]]: Perform symmetry analysis of spin system, where spin degree of freedom breaks symmetry \nCheck aflow --readme=symmetry\n\n", "additional_flags": {"--setting": {}, "--no_scan": {}, "--print": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--edos": {"optional_attributes": [], "attributes": [], "description": "ispin(1=nonspin,2=spin), Outputs to standard out the DOS, format:\nEnergy DOSup DOSdown\nThe integrated DOS is not outputted since it can be calculated from the energy bins\nand DOS. Needs DOSCAR and POSCAR files. DOS for spin down is given in (negative) sign.\nSee also --kband\naflow --edos ispin s d\naflow --edos ispin d s\nSee --edos. Outputs total DOS and DOS of orbital s and d. The sDOS or dDOS is per species\nas given in POSCAR. Output format:\nEnergy DOSup DOSdown s_up_spec1 s_down_spec1...s_up_specN s_down_specN d_up_spec1 d_down_spec1...d_up_specN d_down_specN\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--equivalent": {"optional_attributes": ["tolerance| =tight| =loose"], "attributes": [], "description": "Calculate point/factor/space group and use them to label equivalent\nand inequivalent atoms. On the output, each structure atom has\nnumber_label_of_atom[equivalent_to_label]* (* if inequivalent).\n(SC1107).\nThis routine consists of symmetry consistency checks. If symmetry rules are broken,\nthe code automatically changes tolerance and recalculates from the beginning.\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must not be below the minimum\ninteratomic distance, otherwise an error will be thrown.)\nMagnetic analysis:\nThe magnetic tag specifies the magnetic moment on each of the atoms.  The\ntwo input formats are a comma separated string of the magnetic moments -\nin the same order as the input file, the location of the INCAR, or the location\nof the OUTCAR, which is then read and the magnetic moment for each atom is found\n(must be a static calculation, otherwise this information isn't specified).\nWorks for both collinear and non-collinear systems (AFLOW autodetects\ncollinear/non-collinear based on the input).\nOptions:\n[--no_scan] : Will not perform tolerance scan.\n[--print=txt | --print=json] : Specify output format.\n[--mag|--magnetic|--magmom=[m1,m2,...|INCAR|OUTCAR]]: Perform symmetry analysis of spin system, where spin degree of freedom breaks symmetry \nCheck aflow --readme=symmetry\n\n", "additional_flags": {"--no_scan": {}, "--print": {}, "--mag": {}, "--magnetic": {}, "--magmom": {}}, "mandatory commands": {}, "equivalent commands": ["--equiv", "--iatoms"], "inputs": [" POSCAR"]}, "--eigcurv=": {"optional_attributes": [], "attributes": "bands_directory", "description": "Perform a graph decomposition of the BZ paths found in a BANDS calculation into component vertices and edges.\nThese are then organized into a data structure that contains information on the branching associated with each\nedge in the graph. Once this is in place, short walks are performed along these edges and their branches, with\nthe purpose of detecting maxima and minima in the band structure, as well as their corresponding curvatures.\nThe curvatures are currently calculated using the 5 point central difference approximation,\nf\"(@f3) = (-f1+16f2-30f3+16f4-f5)/(12h^2)\nwhich has an O(4) error. Note that the curvatures are not reliable, given that angular information is lost in the\nvicinity of the vertices.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--effective-mass": {"optional_attributes": [], "attributes": [], "description": "Calculate the carrier effective masses.\nIf the data is generated by aflow, DOSCAR.static, POSCAR.static, and EIGENVAL.static are used.\nOtherwise, DOSCAR, POSCAR, and EIGENVAL are used.\nOutput format:\ncompund_name\n1. Band index:\nCarrier type:\nCarrier Spin:\nEffective masses along principle axes (m0):\nNumber of equivalent valleys:\nDOS effective mass (m0):\nDOS electron effective mass (m0): {me_spin_up, me_spin_down}\nDOS hole effective mass (m0): {mh_spin_up, mh_spin_down}\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--em"]}, "--enum": {"optional_attributes": [], "attributes": [], "description": "Call MULTIENUM and convert a POSCAR with partial occupation into regular POSCARs.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--multienum"], "inputs": [" POSCAR"]}, "--enumsort": {"optional_attributes": [], "attributes": [], "description": "Call MULTIENUM and convert a POSCAR with partial occupation into regular POSCARs, and sort POSCARs using siplified universal force filed method.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--multienumsort"], "inputs": [" POSCAR"]}, "--ewald": {"optional_attributes": ["eta"], "attributes": [], "description": "Finds the electrostatic energy of the POSCAR file using the  \nEwald sum.  Charges must be entered after each atom position.\nE.g.,   Co 0.00 0.00 0.00 +2.  This is easy to do using the --names  \noption.  Eta is a real space screening parameter.  Setting  \neta<=0 or leaving it out will cause aflow to choose it  \nautomatically (and hopefully optimally).  Eta->0 is no  \nscreening and the Ewald recipricol term will be zero.  Eta->inf  \nis total screening and the Ewald real term will be zero.  The  \nEwald sum itself should always be the same and eta will only  \naffect the efficiency of the calculation.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--extract_kpoints": {"optional_attributes": [], "attributes": [], "description": "Extract to stdout the kpoints embedded in the aflow.in file.\nUseful for scripting (SC0209).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--xkpoints"], "inputs": [" aflow.in"]}, "--extract_incar": {"optional_attributes": [], "attributes": [], "description": "Extract to stdout the incar embedded in the aflow.in file.\nUseful for scripting (SC0209).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--xincar"], "inputs": [" aflow.in"]}, "--extract_poscar": {"optional_attributes": [], "attributes": [], "description": "Extract to stdout the poscar embedded in the aflow.in file.\nUseful for scripting (SC0209).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--xposcar"], "inputs": [" aflow.in"]}, "--extract_potcar": {"optional_attributes": [], "attributes": [], "description": "Extract to stdout the potcar embedded in the aflow.in file.\nUseful for scripting (SC0209).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--xpotcar"], "inputs": [" aflow.in"]}, "--extract_symmetry": {"optional_attributes": [], "attributes": [], "description": "Extract the symmetry (pgroup,fgroup,iatoms) from the poscar\nembedded in the aflow.in file. Must use this for aflow<2947\nto fix the fgroup bug.\nUseful for scripting (SC0209).\nCheck aflow --readme=symmetry\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--xsymmetry"], "inputs": [" aflow.in"]}, "--factorgroup": {"optional_attributes": ["tolerance| =tight| =loose"], "attributes": [], "description": "Calculates factor group symmetry of the cell {R|t} and writes\nin the aflow.fgroup.out file. See documentation of aflow.\nThe point group is required for the factor group, therefore\nthe aflow.pgroup.out file will be generated as well.\nThis routine consists of symmetry consistency checks. If symmetry rules are broken,\nthe code automatically changes tolerance and recalculates from the beginning.\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must not be below the minimum\ninteratomic distance, otherwise an error will be thrown.)\nMagnetic analysis:\nThe magnetic tag specifies the magnetic moment on each of the atoms.  The\ntwo input formats are a comma separated string of the magnetic moments -\nin the same order as the input file, the location of the INCAR, or the location\nof the OUTCAR, which is then read and the magnetic moment for each atom is found\n(must be a static calculation, otherwise this information isn't specified).\nWorks for both collinear and non-collinear systems (AFLOW autodetects\ncollinear/non-collinear based on the input).\nOptions:\n[--no_scan] : Will not perform tolerance scan.\n[--print=txt | --print=json] : Specify output format.\n[--screen_only] : Prints symmetry elements to string and does not write to a file.\n[--mag|--magnetic|--magmom=[m1,m2,...|INCAR|OUTCAR]]: Perform symmetry analysis of spin system, where spin degree of freedom breaks symmetry \nCheck aflow --readme=symmetry\n\n", "additional_flags": {"--no_scan": {}, "--print": {}, "--screen_only": {}, "--mag": {}, "--magnetic": {}, "--magmom": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--findsym": {"optional_attributes": ["tolerance_relative: default 1.0e-3"], "attributes": [], "description": "Runs and prints out the output of the program findsym\n", "additional_flags": {"-3": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--findsym_print": {"optional_attributes": ["tolerance_relative: default 1.0e-3"], "attributes": [], "description": "This prints out the input file structure for findsym.\n", "additional_flags": {"-3": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--findsymSG": {"optional_attributes": ["tolerance_relative: default 1.0e-3"], "attributes": [], "description": "This prints out the space group without bothering with wrap ups.\nfindsym must be accessible on the path !\t  \n", "additional_flags": {"-3": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--findsymSG_label": {"optional_attributes": ["tolerance_relative: default 1.0e-3"], "attributes": [], "description": "Same as above but prints ONLY the space group name.\t  \n", "additional_flags": {"-3": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--findsymSG_number": {"optional_attributes": ["tolerance_relative: default 1.0e-3"], "attributes": [], "description": "Same as above but prints ONLY the space group number.\t  \n\n", "additional_flags": {"-3": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--fix_bands": {"optional_attributes": [], "attributes": [], "description": "Resample the PATH following the standard definition of the POSCAR and the standard path.\nIf there are not nearby points, it will ask to redo the nbands step.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--aflow-sym": {"optional_attributes": ["tolerance| =tight| =loose"], "attributes": [], "description": "Calculates the full symmetry of a crystal: point group lattice, point group crystal, factor group,\nspace group, site point group, inequivalent/equivalent atoms, and the point group of the klattice.\nThis routine calculates the full symmetry suite at a certain tolerance. If symmetry rules are broken,\nthe code automatically changes tolerance and recalculates from the beginning.\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must not be below the minimum \ninteratomic distance, otherwise an error will be thrown.)\nMagnetic analysis:\nThe magnetic tag specifies the magnetic moment on each of the atoms.  The\ntwo input formats are a comma separated string of the magnetic moments -\nin the same order as the input file, the location of the INCAR, or the location\nof the OUTCAR, which is then read and the magnetic moment for each atom is found\n(must be a static calculation, otherwise this information isn't specified).\nWorks for both collinear and non-collinear systems (AFLOW autodetects\ncollinear/non-collinear based on the input).\nOptions:\n[--no_scan] : Will not perform tolerance scan.\n[--print=txt | --print=json] : Specify output format.\n[--screen_only] : Prints symmetry elements to string and does not write to a file.\n[--mag|--magnetic|--magmom=[m1,m2,...|INCAR|OUTCAR]]: Perform symmetry analysis of spin system, where spin degree of freedom breaks symmetry \nCheck aflow --readme=symmetry\n\n\n", "additional_flags": {"--no_scan": {}, "--print": {}, "--screen_only": {}, "--mag": {}, "--magnetic": {}, "--magmom": {}}, "mandatory commands": {}, "equivalent commands": ["--AFLOW-SYM", "--AFLOWSYM", "--aflowSYM", "--aflowsym", "--full_symmetry", "--full_sym", "--fullsym"], "inputs": [" POSCAR"]}, "--frac": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a new POSCAR file with\natom positions in direct (fractional) coordinates.\n\n", "additional_flags": {"--fract": {}, "--fractional": {}, "--direct": {}, "-f": {}, "-d": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--getTEMP": {"optional_attributes": [], "attributes": [], "description": "If available, the command outputs the hostname and temperatures of the machine. Useful to find hardware issues:\nwith --runstat the command continuously prints the temperature, refreshing every XX refresh seconds;\nwith --runbar the command prints a bar with the temperature, refreshing every XX refresh seconds;\nwith --refresh=X you can specify the refresh time (DEFAULT below)\nwith --warning_beep=T, if the max temp goes beyond T(C, DEFAULT below), the command beeps the computer speaker;\nwith --warning_halt=T, it the max temp goes beyond T(C, DEFAULT below), the command halts the computer (aflow must be run as root).\nDEFAULT VALUES in .aflow.rc\nAFLOW_CORE_TEMPERATURE_BEEP=56.0  // Celsius\nAFLOW_CORE_TEMPERATURE_HALT=65.0  // Celsius, you need to run aflow as root to halt\nAFLOW_CORE_TEMPERATURE_REFRESH=5.0   // seconds\n\n", "additional_flags": {"--runstat": {}, "--runbar": {}, "--refresh": {}, "--warning_beep": {}, "--warning_halt": {}}, "mandatory commands": {}, "equivalent commands": []}, "--gfa": {"optional_attributes": [], "attributes": [], "description": "Outputs the glass-forming ability of an alloy system at various stoichiometries.\nIt is optional to specify a file of atomic environments for the code to read (saves time).\nThe file must follow the format of, but not be named All_atomic_environments.dat.\nCheck aflow --readme=gfa\n\n", "additional_flags": {"--ae_file": {}}, "mandatory commands": {"--alloy": {}}, "equivalent commands": []}, "--gulp": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a gulp formatted input file based on\nthe POSCAR input file.  The formatting is for a distance\ncalculation in gulp.  If you want atom names you must put\nthem after each atom position in the POSCAR file (see --names).\nIf any names are missing they are defaulted to H.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--hkl=": {"optional_attributes": [",bond"], "attributes": "h,k,l < POSCAR ", "description": "Returns the planar density and number of broken bonds per unit are\nalong the Miller plane (h k l). The calculations returns also\nthe bonds broken for each type and all types.\nNote: the indices are with respect to the unit cell, not the\nconventional cell, and the result is in #atoms/A^2 (scale included).\nBOND: (default BOND_DEF):\nIf you specify a \"bond\", all the bonds shorter than\nbond*nearest_neighbour_bond (between all types or combination\nof them) that are cut by the plane will contribute to the broken\nbond density Nb(#/AA).\nNOTE2: the 1st atom is taken to be the origin (all the other atoms\nare shifted).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR "]}, "--hkl_search": {"optional_attributes": ["khlmax"], "attributes": [], "description": "Returns the planar density and number of broken bonds per unit\nare along the Miller plane (h k l). The calculations returns\nalso the bonds broken for each type and all types.\nNote: the indices are with respect to the unit cell, not the\nconventional cell, and the result is in #atoms/A^2 (scale included).\nSearch from -hmax<=h<=hmax, -kmax<=k<=kmax, -lmax<=l<=lmax, where\nthe boundaries are (-4,-4,-4) to (4,4,4) unless the HKLMAX is specified.\nHKLMAX:\nIf you specify a hklmax, then the search is  \n-hklmax<=h<=hklmax, -hklmax<=k<=hklmax, -hklmax<=l<=hklmax\nBOND: (default 1.3):\nIf you specify a \"bond\", all the bonds shorter than\nbond*nearest_neighbour_bond (between all types or combination\nof them) that are cut by the plane will contribute to the broken\nbond density Nb(#/AA).\nSTEP: (default 1):\nIf you specify STEP then the update of h,k,l, is done in steps of step.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR\t"]}, "--hkl_search_simple": {"optional_attributes": ["cutoff"], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR\t"]}, "--hkl_search_complete": {"optional_attributes": ["cutoff"], "attributes": [], "description": "Returns the planar density and number of broken bonds per unit are\nalong the Miller plane (h k l). The calculations returns also the bonds\nbroken for each type and all types.\nNote: the indices are with respect to the unit cell, not the\nconventional cell, and the result is in #atoms/A^2 (scale included).\nThe simple search is fast but it might miss some planes!\nThe complete search should not miss planes but can be very slow!\nCUTOFF (default 1.3):\nIf you specify a cutoff, the command will look for all the\nplanes generated with triplets of atoms in a radius cutoff*|a1+a2+a3|.\nThe algorithm to find the density of atoms is quite complex,\nand it relies on a sum of four triangles (one triangle v1,v2,v3\ngenerated by hkl) plus three triangles generated by adding the v's\nand subtracting one. This guarantees that we span 2 unit cells \"rhombi\"\nin independent directions. The algorithm also plots the number of atoms\nin the radius, so you can choose a decent cutoff'. For bcc/fcc cutoff=1.5\nusually good. If you do not specify the cutoff, a value of 1.3 is\ntake by default. Be careful with the cutoff ! The complexity grows\nas cutoff^3 !\nBOND: (default 1.3):\nIf you specify a \"bond\", all the bonds shorter than\nbond*nearest_neighbour_bond (between all types or combination\nof them) that are cut by the plane will contribute to the broken\nbond density Nb(#/AA).\nHKLMAX (default \"dims\" given by cutoff)\nIf you specify a hklmax, then the search is  \n-hklmax<=h<=hklmax, -hklmax<=k<=hklmax, -hklmax<=l<=hklmax\nSTEP (detault simple: 1 complete 1/12)\nIf you specify STEP then the update of h,k,l, is done in steps of step.\nNOTE1: The algorithm will be implemented in aflow as automatic\nsurfaces generation.\nNOTE2: the 1st atom is taken to be the origin (all the other atoms\nare shifted).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR\t"]}, "--hnf": {"optional_attributes": [], "attributes": [], "description": "Given a POSCAR and a volume 'n' (determinant of the Hermite normal form), it\ngenerates the set of supercells of POSCAR having volume n and being unique.\nIn more details: it calculates the HNF matrices, the point group of the POSCAR lattice,\nthen reduces the supercells by symmetry and print the unique POSCARs in aflow.in START/STOP format,\nready for high-throughput calculation.\nIf the volume is chosen negative, then all the supercells with HNF from 2 to -n will be generated\nwith the same algorithm.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--hnftol": {"optional_attributes": [], "attributes": [], "description": "Given a PARTCAR, it calculates the HNF size to get the right concentration spread of partial\noccupation within the tolerance. If eps is zero, negative or it is not given, aflow\ntakes the tolerance from the PARTCAR, and if this is not available, it takes the default value. PARTCAR example:\nPARTCAR of Ag8.8Cd4Zr3.2      // EXAMPLE\n-191.600  0.02               // POSCAR scale and tolerance if>0)\n5.76 5.76 5.76 90 90 90       // usual a1,a2,a2 or ABCCAR or WYCKCAR definitions)\n8*1+1*0.7333 4*1 1*0.266+3*1  // needs keywords * and + to determine the species and the occupations)\nDirect Partial                // you need to specify Partial, the \"P\" is mandatory)\n0.25  0.25  0.25  Ag\n0.75  0.75  0.25  Ag\n0.75  0.25  0.75  Ag\n0.25  0.75  0.75  Ag\n0.25  0.25  0.75  Ag\n0.75  0.75  0.75  Ag\n0.25  0.75  0.25  Ag\n0.75  0.25  0.25  Ag\n0.50  0.50  0.50  Ag\n0.00  0.00  0.00  Cd\n0.00  0.50  0.50  Cd\n0.50  0.00  0.50  Cd\n0.50  0.50  0.00  Cd\n0.50  0.50  0.50  Zr\n0.50  0.00  0.00  Zr\n0.00  0.50  0.00  Zr\n0.00  0.00  0.50  Zr\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" PARTCAR"]}, "--hnfcell": {"optional_attributes": [], "attributes": [], "description": "Convert a POSCAR with partial occupation into regular POSCARs, and genereate a LOG.POCC file in working direcotry.\nGiven a PARTCAR, it calculates the HNF size and generate supercells. \nPARTCAR Example:\nPARTCAR of Se0.75Sn1Te0.25 [Sn1Se0.75Te0.25]\n1.0  -4 (0.001)                                  //POSCAR scale and [HNF size if <0 (useful when you know the HNF size); tollerance if>0]\n0.0000000000000000    3.0268425330530309    3.0268425330530309\n-3.0268425330530309    3.0268425330530309    0.0000000000000000\n-3.0268425330530309    0.0000000000000000    3.0268425330530309\n1*0.75 1*0.25 1                                 //different species mut be separated by blank space \nDirect Partial\n0.5000000000000000  0.5000000000000000  0.5000000000000000 Se\n0.5000000000000000  0.5000000000000000  0.5000000000000000 Te\n0.0000000000000000  0.0000000000000000  0.0000000000000000 Sn\nAnother PARTCAR Example:\nSe1.75Sn2 \n1.0  -4\n2.1393597183461157   -5.9785152916018083    0.0000000000000000\n2.1393597183461157    5.9785152916018083    0.0000000000000000\n0.0000000000000000    0.0000000000000000    4.2994759406996081\n1*0.75+1  2\nDirect P\n0.6424479395478624  0.3575520604521376  0.7500000000000000   Se\n0.3575520604521376  0.6424479395478624  0.2500000000000000   Se\n0.8714903476790070  0.1285096523209930  0.7500000000000000   Sn\n0.1285096523209930  0.8714903476790070  0.2500000000000000   Sn\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--icsd": {"optional_attributes": [], "attributes": [], "description": "Output to standard out in \"ICSD-format\" (the NIST's Inorganic\nCrystal Structure Database) all Pb-Sn-Se ternary-compounds.\nThe arguments for --icsd can be the elements' symbol or atomic number.\nThe input is from stdin ICSD-format in this example is streamed in\nfrom file \"ternary.icsd\".\n\"ICSD-format\" is generated by exporting the entry (hit) in NIST's Inorganic\nCrystal Structure Databse in long format using \"FindIt\" software (the stand-alone ICSD browser).\nExamples are /common/NIST/binary.icsd  and /common/NIST/ternary.icsd\nMore information on ICSD: http://www.nist.gov/srd/nist84.htm\n(2009, wahyu@alumni.duke.edu)\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" ternary.icsd"]}, "--icsd_alllessthan": {"optional_attributes": [], "attributes": [], "description": "(see --icsd). Output compounds if ALL elements in a compound have Z<Z_Ra\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_allmorethan": {"optional_attributes": [], "attributes": [], "description": "(see --icsd_alllessthan).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_basislessthan": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_basismorethan": {"optional_attributes": [], "attributes": [], "description": "(see --icsd). Output all compounds having number of basis atoms in the PRIMITIVE cell\nlessthan or morethan the specified parameter.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_chem": {"optional_attributes": [], "attributes": [], "description": "(see icsd). Extract MgB4 compound.\t\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_cubic": {"optional_attributes": [], "attributes": [], "description": "(see --icsd). Output all compounds which belong to the specified system.\nIf multiple options, the relational is \"OR\".\n", "additional_flags": {}, "mandatory commands": {"--icsd_orthorhombic": {}}, "equivalent commands": [], "inputs": [" ternary.icsd"]}, "--icsd_triclinic": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" ternary.icsd"]}, "--icsd_monoclinic": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" ternary.icsd"]}, "--icsd_orthorhombic": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" ternary.icsd"]}, "--icsd_tetragonal": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" ternary.icsd"]}, "--icsd_rhombohedral": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" ternary.icsd"]}, "--icsd_trigonal": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" ternary.icsd"]}, "--icsd_hexagonal": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" ternary.icsd"]}, "--icsd_tri": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_mcl": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_mclc": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_orc": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_orcc": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_orcf": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_orci": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_tet": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_bct": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_rhl": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_hex": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_cub": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_fcc": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_bcc": {"optional_attributes": [], "attributes": [], "description": "(see --icsd). Output compunds which belong to the specified lattice type:\ntri (trigonal)\nmcl (monoclinic)\nmclc (c-centered monoclinic)\norc (orthorhombic)\norcc (c-centered orthorhombic)\norcf (face-centered orthorhombic)\norci (body-centered orthorhombic)\ntet (tetragonal)\nbct (body-centered tetragonal)\nrhl (rhombohedral/trigonal)\nhex (hexagonal)\ncub (simple cubic)\nfcc (face-centered cubic)\nbcc (body-centered cubic)\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_denslessthan": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" ternary.icsd"]}, "--icsd_densmorethan": {"optional_attributes": [], "attributes": [], "description": "(see --icsd). Output all compounds with density (in g/cm^3) lessthan and/or morethan\nthe specified argument.\n", "additional_flags": {}, "mandatory commands": {"--icsd_denslessthan": {}}, "equivalent commands": [], "inputs": [" ternary.icsd"]}, "--icsd_id": {"optional_attributes": [], "attributes": [], "description": "(see --icsd). Extract compound with entry ID number 11120 of the original ICSD database.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_lessthan": {"optional_attributes": [], "attributes": [], "description": "(see --icsd). Output all compounds in binary.icsd that contains AT LEAST\nONE element with atomic number Z<Z_Pb (Z<82).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" binary.icsd"]}, "--icsd_listmetals": {"optional_attributes": [], "attributes": [], "description": "Output to stdout a list of metallic elements used in the --icsd_removemetals option.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--icsd_makelabel": {"optional_attributes": [], "attributes": [], "description": "Output to stdout a list of labels compatible to generate aflow.in from icsd database.\nThe label uses the following format: chemicalformula_ICSD_entrynumber\nThe chemicalformula is ascendingly sorted based on the element symbol and the\nconcentration must be explicitly included eventhough it is 1.\nThe entrynumber is the entry number of the compound in the ICSD database.\ne.g. Zn1Zr1_ICSD_106235\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_morethan": {"optional_attributes": [], "attributes": [], "description": "(see --icsd_lessthan and --icsd).\n", "additional_flags": {}, "mandatory commands": {"--icsd_lessthan": {}}, "equivalent commands": [], "inputs": [" binary.icsd"]}, "--icsd_n_ary": {"optional_attributes": [], "attributes": [], "description": "(see --icsd). Output all ternary compounds. and so on\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_nobrokenbasis": {"optional_attributes": [], "attributes": [], "description": "(see --icsd). Some compounds reported in the ICSD database have missing wyckoff position\nof some of the constituents. This option extracts only the ones with complete wyckoff pos.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_nopartialocc": {"optional_attributes": [], "attributes": [], "description": "(see --icsd). Output only compounds with full occupancies\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_proto": {"optional_attributes": [], "attributes": [], "description": "(see icsd). Output all ternary compounds with general chemical formula A2BC7, AB2C7, A7B2C, and all\nother posible cyclic permutations.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_remove": {"optional_attributes": [], "attributes": [], "description": "(see --icsd). Remove compounds which contain Pu.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_removemetals": {"optional_attributes": [], "attributes": [], "description": "(see --icsd). Remove compounds that are composed ENTIRELY by metallic elements.\nMetallic elements:\nAlkali metals, Alkaline earth metals, Transition metals,\nLanthanoids, Actinoids, Other metals (Al, Ga, In, Sn, Tl, Pb, Bi).\nTo list all metallic elements used in this option, use --icsd_listmetals\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_sg": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" binary.icsd"]}, "--icsd_sglessthan": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" binary.icsd"]}, "--icsd_sgmorethan": {"optional_attributes": [], "attributes": [], "description": "(see --icsd). Output all compounds where the space group number satisfies the\nspecified arguments.\n", "additional_flags": {}, "mandatory commands": {"--icsd_sglessthan": {}}, "equivalent commands": [], "inputs": [" binary.icsd"]}, "--icsd_unique": {"optional_attributes": [], "attributes": [], "description": "(see --icsd). Dicard redundant compounds based on SG# AND ChemicalFormula\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd_check_raw": {"optional_attributes": [], "attributes": [], "description": "Checks the validity of the current vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_ICSD)/RAW/ dirs and files\n(POSCAR KPOINTS DOSCAR and EIGENVAL)\nwith respect to vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_ICSD)/LIB/  \noutput.dat will contain:\nvAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_ICSD)/RAW/../../  OK\nvAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_ICSD)/RAW/../../  OK\nvAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_ICSD)/RAW/../../  ERROR file1 file2 ...\nvAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_ICSD)/RAW/../../  NotInLIB\nvAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_ICSD)/RAW/../../  NotInLIB\nvAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_ICSD)/LIB/../../  NotInRAW\nvAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_ICSD)/LIB/../../  NotInRAW\nand so on.\naflow --icsd_check_raw 0 > output.dat\nsame as the default --icsd_check_raw\naflow --icsd_check_raw 1 > output.dat\nuse the list of RAW and LIB dirs that have been compiled in aflow\ni.e. XHOST.vGlobal.at(X) (ICSD_LIB);  // aflow_data_calculated.cpp\nXHOST.vGlobal.at(X) (ICSD_RAW);  // aflow_data_calculated.cpp\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--icsd2aflowin": {"optional_attributes": [], "attributes": [], "description": "Convert input.icsd (ICSD-format) to aflow.in\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd2poscar": {"optional_attributes": [], "attributes": [], "description": "Write output to stdout POSCAR from stdin ICSD-format\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd2proto": {"optional_attributes": [], "attributes": [], "description": "Write output to stdout in ICSD_PROTO-format from stdin ICSD-format\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.icsd"]}, "--icsd2wyck": {"optional_attributes": [], "attributes": [], "description": "(see --icsd2wyck). In this case, all compounds will be processed.\nIf partial occupation is detected, the sof will be written as part of\nthe label of the element and WARNING will be written in the title and cerr.\n", "additional_flags": {}, "mandatory commands": {"--sof": {}}, "equivalent commands": [], "inputs": [" ternary.icsd"]}, "--icsdproto2aflowin": {"optional_attributes": [], "attributes": [], "description": "Convert ICSD-PROTOTYPE-format to aflow.in\n(2007-2011, wahyu@alumni.duke.edu)\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" input.proto"]}, "--identical": {"optional_attributes": [], "attributes": [], "description": "Makes all the atoms identical. Useful to find the properties of\nthe superlattice.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--incell": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a POSCAR file with all\natoms mapped to their images within the unit cell.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--incompact": {"optional_attributes": [], "attributes": [], "description": "Similar to --incell\nOutputs to standard out a POSCAR file where all the\natoms are mapped through the unit and neighbours cells\nto minimixe the shortest possible bond with an adjacent atom\nThis option is very useful if you run big and complicate\nmolecules where atoms exit of the unit cell and you have\nproblems understanding where they are because visualization\npackages do not show bonds anymore ...\nAnyway, it is easier to test than to describe. (SC 6 Aug 04)\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--insphere": {"optional_attributes": [], "attributes": [], "description": "Similar to --incell and --incompact\nOutputs in XYZ format (rasmol standard), the\npositions of all the atoms inside a sphere of radius\n\"radius\" centered in the origin.\nIf you want another origin, you must shift the atoms first.\nThe radius is in cartesian format. (SC 6 Aug 04)\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--intpol=": {"optional_attributes": [], "attributes": "file1,file2,nimages,nearest_image_flag", "description": "Creates nimages image POSCAR files by interpolating linearly\nbetween structures in file1 and file2.  File1 and file2\nshould both be POSCAR like files with corresponding atoms.  \nThe nearest_image_flag is set to 'e' for exact interpolation\nand 'n' or 'N' for nearest-image interpolation.  Exact\ninterpolation means that all the positions are taken exactly\nas they are input.  Nearest-image interpolation means that\nthe interpolation between two corresponding atoms in file1\nand file2 is actually done between the atom in file1 and\nthe nearest image of the corresponding atom in file2.  This\nis useful, e.g., if the positions (in direct coordinates)\nare 0.01 (file1) and 0.99 (file2).  These are far apart in\nexact interpolation but very close in nearest-image\ninterpolation.  The POSCAR output files are numbered and\noutput to the present directory.  The code also creates\nnumbered subdirectories and copies the appropriate POSCAR\nfiles into those.  This option makes it easy to set up a rubber\nband calculation in vasp.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--inwignerseitz": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a POSCAR file where all the atoms are\nmapped to their images in the Wigner-Seitz cell.(SC 10Jan04)\n", "additional_flags": {"--inws": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--inflate_lattice=": {"optional_attributes": [], "attributes": "coefficient | ", "description": "Inflate/deflate POSCAR lattice of coefficient.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--ilattice"], "inputs": [" POSCAR"]}, "--inflate_volume=": {"optional_attributes": [], "attributes": "coefficient | ", "description": "Inflate/deflate POSCAR lattice of coefficient.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--ivolume"], "inputs": [" POSCAR"]}, "--kpath": {"optional_attributes": [], "attributes": [], "description": "Outputs to stdout a KPOINTS in line mode useful for bandstructure\ncalculations. The k-points path is chosen to cover all possible\npair combinations of special k-points in the irreducible BZ (IRBZ).\na special k-point is either:\n(1) a center of a face in IRBZ, or\n(2) a corner of IRBZ, or\n(3) a midpoint (say M) of a line-edge (say AB) IF the Gamma-M-A makes a 90 degrees angle.\nThe coordinates are given in fractionals of the k-vectors, in which\nderived from the \"standard\" lattice used in AFLOW.\nTo find out the standard lattice of the POSCAR, use --sp option.\nOptional: --grid=XX specifies the density of the grid, if not specified it takes --grid=16.\nNOTE. If grid is negative real number, e.g. --grid=-0.01, then its value is taken \nas the deltaK during the path which is constructed as uniformly as possible in the k-space.\nThe option works both for VASP, QE style mode inputs (ABINIT and AIMS in the future).\nExample: aflow --proto=3:Ag:Zr [--qe | --abinit | --aims] | aflow --kpath=-0.01\n\n", "additional_flags": {"--grid": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--kpoints=": {"optional_attributes": [], "attributes": " | ", "description": "This funtion prints a set of Monkhorst-Pack kpoint mesh values\n(divisions along each reciprical lattice parameter)\nbased on the desired KDENS density and the\nlattice parameters.  The values assure the most even\ndistribution of KDENS along the lattice params consistent\nwith the kpt density. See --delta_kpoints\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--kppra", "-k"], "inputs": [" POSCAR "]}, "--jmol": {"optional_attributes": ["n1"], "attributes": [], "description": "Similar to --xyz. Starts jmol (must be available) with a file\nbased on the POSCAR input file. If you want to use atom names\nyou must put them after each atom  position in the POSCAR\nfile (see --names). If any names are missing they are defaulted to H.\nIf no numbers are specified, aflow takes \"1,1,1\". (SC/Dec09)\nBackground color may be chosen (e.g., white, brown, beige, etc...).\nDefault background color is white. The flag \"true\" specifies that the\ncif file is to be saved. Default is \"false.\" (RHT/Mar11)\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--jmolanimation": {"optional_attributes": [], "attributes": [], "description": "Generate animated gif file of rotated structure from POSCAR by using\njmol and ImageMagick. If no output gif file name is given, the default name\n\"aninamtion_\" + process id + \".gif\" will be used. The setting parameters\nof jmol cannot be changed by users currently.\nUser must have valid DISPLAY for jmol to open its window and \"Convert\"\ncommand is used to generate multi-gif by combining gif files generated by jmol.\n\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--animation", "--print"], "inputs": [" POSCAR"]}, "--join_strlist": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a sequence of structures in POSCAR format.\nThe structures consist of those in strlist1 with the atoms from  \nstrlist2 added in.  The positions are taken from strlist2,  \ntransformed into Cartesian coordinates, and then inserted into\nstrlist1.  All inserted atoms are added as new types.  If one\nfile has more structures than the other then the shorter file\nis padded with copies of the last structure.  For more information\non a strlist see --make_strlist.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--kband": {"optional_attributes": [], "attributes": [], "description": "ispin(1=nospin,2=spin). Outputs to standard out Eband vs K for band structure plot.\nNeeds EIGENVAL and KPOINTS files. Format:\nKpoint upEband1 upEband2...upEbandN downEband1 downEband2...downEbandN\nThe Kpoint column is constructed by cascading each KPOINT-segment specified in KPOINT file.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--latticereduction": {"optional_attributes": [], "attributes": [], "description": "Lattice Reduction to Max Orthogonality (Minkowski) and then\nto Niggly Form. This procedure has been shown to give the best\nunit cell for the lattice in terms of Minkowski optimization and\nmost symmetric representation.  For the bcc and fcc it gives the\nstandard, most symmetric, unit vectors.\nIt also helps in the primitive cell serach, as it has been\nincluded by default inside. (SC0902).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["-latreduction"]}, "--lattice_type": {"optional_attributes": [], "attributes": [], "description": "Returns the lattice type and the conventional lattice type of the CRYSTAL following the tables\nof Setyawayn-Curtarolo [http://dx.doi.org/10.1016/j.commatsci.2010.05.010].\nCheck aflow --readme=symmetry\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--lattice", "--lattice_crystal"], "inputs": [" POSCAR"]}, "--lattice_lattice_type": {"optional_attributes": [], "attributes": [], "description": "Returns the lattice type and the conventional lattice type of the LATTICE following the tables\nof Setyawayn-Curtarolo [http://dx.doi.org/10.1016/j.commatsci.2010.05.010].\nCheck aflow --readme=symmetry\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--lattice_lattice"], "inputs": [" POSCAR"]}, "--latticehistogram": {"optional_attributes": [], "attributes": [], "description": "Outputs the lattice calculated respect to tolerance of histogram of symmetry.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--unique_atom_decorations": {"optional_attributes": [], "attributes": [], "description": "Determines the unique and duplicate atom decorations for a given structure, grouping \nequivalent decorations (if applicable).\n\n[GENERAL_COMPARISON_OPTIONS]:\n[--np=16|--num_proc=16] : Allocate the number of processors/threads for the task.\n[--optimize_match] : Explore all lattice and origin choices to find the best matching representation, i.e., minimizes misfit value.\n[--no_scale_volume] : Suppresses volume rescaling during structure matching; identifies differences due to volume expansion or compression of a structure.\n[--ignore_symmetry] : Neglects symmetry analysis (both space group and Wyckoff positions) for grouping comparisons.\n[--ignore_Wyckoff] : Neglects Wyckoff symmetry (site symmetry) for filtering comparisons, but considers the space group number.\n[--ignore_environment] : Neglects LFA environment analysis for filtering comparisons.\n[--print=TEXT|JSON] : For comparing multiple structures, the results printed to the relevant files are formatted into human-readable \ntext or JSON, respectively.  By default, AFLOW-XtalMatch writes the output in both formats.\n[--quiet|--q] : Suppresses the log information for the comparisons.\n[--screen_only] : Prints the comparison results to the screen and does not write to any files.\nCheck aflow --readme=compare\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" file"]}, "--use_LOCK=": {"optional_attributes": [], "attributes": "XXX", "description": "Uses XXX instead of \"LOCK\" in freezing/searching/operating directories.\nThe option is very useful for compounded calculations.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--ltcell=": {"optional_attributes": [], "attributes": "file ", "description": "Outputs to standard out the linear tranform of the input\nPOSCAR file.  This simpy multiplies cell parameters and\natom positions by the 3x3 matrix values.  This can\nbe used to rotate the cell, swap x and y coordinates, etc.\nThis cannot create a supercell (see --supercell for that).\nThe nine numbers must be separated spaces, and they form the\nnine elements a11,a12,a13,a21,a22,a23,a31,a32,a33 of the 3x3\nsupercell matrix, respectively. If you specify only 3 numbers,\nthe other six are taken zero. If you use the \"file\" syntax,\nnine numbers are read from file. They can be on one or\nmultiple lines. New algorithm by SC (aug07).\nThe new lattice is (by column) (a1 a2 a3)*=LT*(a1 a2 a3).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--ltcellfv=": {"optional_attributes": [], "attributes": "v1,v2,v3,phi ", "description": "Rotates the lattice vectors and atoms by angle phi (in degrees)\naround vector (v1,v2,v3).  Outputs to standard out the new\nPOSCAR.  This can be used to rotate the cell, swap x and y\ncoordinates, etc. \n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR  "]}, "--magpara=": {"optional_attributes": [], "attributes": "directory | ", "description": "Output shows the magnetic momentum, cell of volume and spin polarization around Fermi level.\nIf a directory is not specified, it loads \"./\"\nEXAMPLE: aflow --magpara\nMAGNETIC MOMENTUM CELL : 2.74234\nMAGNETIC MOMENTUM ATOM : 0.685586\nVOLUME CELL            : 53.43\nVOLUME ATOM            : 13.3575\nSPIN DECOMPOSITION     : 0.032,1.447,1.447,-0.062\nPOLARIZATION FERMI     : 0.755068\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--magpara"]}, "--slab=": {"optional_attributes": [",#filled_layers", [",#vacuum layers"]], "attributes": "h,k,l < POSCAR", "description": "Produces a slab unit cell in POSCAR format. The normal of the slab is specified\nby the Miller indices of the orthogonal plane. Thus, make sure you know how the original POSCAR is specified.\nFor example, (100) is not what you think for fcc primitive.\nEach point (hkl) in the reciprocal lattice\ncorresponds to a set of lattice planes (hkl) in the real space lattice.\nThe reciprocal lattice vector points in a direction normal to the real space planes.      \n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--make_strlist": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a sequence of structures in POSCAR format.\nThe strlist file created contains a list of structures, each  \nformatted exactly like a POSCAR file, with an empty line after  \nall but the last one.  The file must have no extra lines at the end\nor all routines that read it will crash.  The lattice parameters  \nare pulled out from the OUTCAR and the positions from XDATCAR.  \nIf OUTCAR has too few lattice parameters then copies of the last  \nset are used for the remaining XDATCAR.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--maxatoms=": {"optional_attributes": [], "attributes": "N | ", "description": "Limits the input POSCAR to N atoms (it writes an error if atoms>N).\nThis is an useful option for online wrappers.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--max_atoms", "--atoms_max", "--atomsmax"], "inputs": [" POSCAR"]}, "--minkowski_basis_reduction": {"optional_attributes": [], "attributes": [], "description": "Converts the unit cell with the Minkowski reduction\nThis routine takes a set of basis vectors (that form a lattice)\nand reduces them so that they form the shortest possible basis.\nThe reduction is performed so that each vector \"a_i\" is a close\nas possible to the origin while remaining in the affine plane which\nis defined by \"a_j\", \"a_k\" but shifted by \"a_i\", for any choice\nof even permutations of i,j,k in 1,2,3.\nSee Lecture notes in computer science, ISSN 0302-974, ANTS - VI :\nalgorithmic number theory, 2004, vol. 3076, pp. 338-357\nISBN 3-540-22156-5\nWritten by Gus Hart in F90, recoded by SC in C++ (Sep/08).\nhttp://www.farcaster.com/papers/sm-thesis/node6.html\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--minkowski", "--mink"], "inputs": [" POSCAR"]}, "--miscibility": {"optional_attributes": [], "attributes": [], "description": "Tells if in the library the system (on of the strings) was found\nto be miscible, immiscible or unknown.\naflow --mix AgMg\nreturns AgMg MISCIBILITY_SYSTEM_MISCIBLE\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--mix"]}, "--mom": {"optional_attributes": [], "attributes": [], "description": "Gets the mass moments of the POSCAR file.  Gets only the first\n(center of mass) at this point. The scale is used in the\ncalculation.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR  "]}, "--msi": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a msi file based on the POSCAR input\nfile.  This can be used as input for cerius.\nIn the functions that output the msi format I do something\nto put the lattice vectors in a form that cerius2 can read\nhappily.  It involvs making the third lattice vector parallel\nto Z, the second once in the YZ plane, and the letting the\nfirst lattice vector have all 3 components.  It is confusing\nand probably done in a silly manner, but it seems to work.\nIf you want atom names you must put them after each atom\nposition in the POSCAR file (see -names).  If any names are\nmissing they are defaulted to H.  For an msi file one\nneeds the atomic numbers.  These are coded into the\nprogram for most atoms.  If you use atoms with atomic numbers\nover 86 or f-electron atoms (Lanthanides and Actinides) then\nyou will have to increase the database.  For the list of all\ncoded atomic numbers see the constructor for the structure\nclass in structure.cc.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--names": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a POSCAR file with names\nA1,A2, ... after the atom positions.  Each name\nAi is assigned to all atoms of type i.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--natoms": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out the number of atoms in the POSCAR.\nUseful for scripting. (SC0902).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--numatoms"], "inputs": [" POSCAR"]}, "--nbondxx": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out the nearest neighbor distances between all types of atoms in the POSCAR.\nUseful for scripting. (CO1017).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--nanoparticle": {"optional_attributes": [], "attributes": [], "description": "Starting from the input poscar, aflow prints a nanoparticle\nPOSCAR with the radius and appropriate lattice making the\nparticles as far as \"at least distance\". The origin of the\nparticle is taken to be point 0,0,0 in the unit cell.\nYou can translate the origin before with the command --setorigin (see below)\nto an atom, a point in cartesian or fractional coordinates.\nThe radius and distance are in Angstroms and not scale\nnormalized (all scales are set to 1.0).\nIf not specified the parameters are taken to be 10A. (SC Apr/08)\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--ndata": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard output the following normalized data:\na1 a2 a3 phi(a2,a3) phi(a3,a1) phi(a1,a2)\na1,a2,a3 are NORMALIZED over V^1/3 and phi are in degrees.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--niggli": {"optional_attributes": [], "attributes": [], "description": "Converts the unit cell to the standardized Niggli form.  The\nform is unique (up to some signs, I think).  The transformation\nmakes use of only the lattice vectors and does not depend on the\nbasis atoms.  This will work on any cell, but it treats the given\ncell as primitive, and it will not reduce the cell to primitive\nif it is not primitive already.  At present the algorithm seems to\nhang if I force more than about 6 digits of accuracy so be aware that\nsmall errors might be introduced (these can break symmetry!).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--nn": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out the nearest neighbour distance.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--noorderparameter": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a POSCAR without all the order parameter\nstuff in it. (SC0903).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--nosd": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a POSCAR without selective dynamics\nformatting.  Combined with the above --sd option this allows\neasy movement between POSCAR files with and without selective\ndynamics formatting.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--numnames": {"optional_attributes": [], "attributes": [], "description": "Same as names except appends an increasing integer to\neach different atom type.  Starts counting at 1 again\nfor each new atom type.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--nspecies": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out the number of species in the POSCAR.\nUseful for scripting. (SC0902).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--numspecies"], "inputs": [" POSCAR"]}, "--OrthoDefect": {"optional_attributes": [], "attributes": [], "description": "Computes the orthogonality defect of the lattice of POSCAR. \nThe orthogonality defect is defined as the ratio of the product of\nlattice vector magnitudes to the volume of the parallelpiped defined \nby the lattice vectors. So, for three orthogonal vectors, this ratio \nwould be unity. (R. Taylor).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--pdb": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a protein database (PDB) format file\nbased on the POSCAR input file.  This can be used as input\nfor many viewing programs.  Note that I don't really know\nanything about PDB but it seems to be an annoyingly column\nformatted.  Therefore, all the widths I use must tbe kept as is.  \nThis means that if we have width W for variable X, and prec P,\nthen X takes up P+1 for for the decimal part and decimal point,\nand we have only R=W-(P+1)-1=W-P-2 remaining digits (the -1 is\nbecause if X takes up all of W then you run into the previous\nfield).  So we have the constraints\nCell vectors: W=9,P=3,R=4 => <=10^5\nCell angles: W=7,P=2,R=3 => <=10^3 (which always works since\nangles are given as >=0 and <=360)\nCartesian positions: W=12,8,P=3,R=7,3 => <=10^8,10^4 (>0)\nand <=10^7,10^3 (<0 since you need a space for the -- sign)\nThis is all probably fine unless an atom makes it to more\nnegative than -999.999.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--pdos": {"optional_attributes": [], "attributes": [], "description": "Writes the projected DOS for any desired combination of atoms,\nkpoints, bands, and lm values.  The output consists of 6  \ncolumns, spin up, down, up-down, and the cumulative DOS for  \neach of those.  Only up spin data is given for non  \nspin-polarized calculations.  The PDOS should look like\nan equivalent vasp output but will not be identical since\nvasp uses a different smearing method to get the PDOS.  \nHowever, I think these PDOS are basically correct, at least\nqualitatively.  To make this work you must\n-- Use slightly altered version of vasp\n-- set LORBIT=2 in INCAR\n-- Set ISYM=0 in INCAR  \n-- Set RWIGS in INCAR (see below)\nThe details explaining all this are given above in the --pocc  \nsection.  The input file has the following format\n\n# Input for aflow --pdos.  \n\n# These values you supply once.\nEMIN = --20.01477264 # default: 0.5eV below lowest energy.\nEMAX = 6.90250559 # default: 0.5ev above highest energy.\nNBINS = 300 # default: 300\nSMOOTH_SIGMA = 0.1 # Gaussian smoothing of the DOS.\n# default: 1 bin width.\nPRINT_PARAMS = 1 # 0=prints only data (easy to plot).\n# 1=prints all the input parameters.\n# default: 0\n\n# You can have as many cases as you want.\n# They are all added together.\n\n# case 1\nATOMS = 1 # default: all atoms.\nKPOINTS = # default: all kpoints.  \nBANDS = # default: all bands.\nLMVALUES = # default: all s,p,d,f.\n\n# case 1\nATOMS = 2 # default: all atoms.\nKPOINTS = 1 2 3 # default: all kpoints.  \nBANDS = 1 # default: all bands.\nLMVALUES = 3 # default: all s,p,d,f.\n\nAll # denote comment lines.  Each case is started when the token\nATOMS is used.  Following an ATOMS token, all KPOINTS, BANDS,  \nLMVALUES tokens will apply to the atoms denoted in the preceeding  \nATOMS token until the next ATOM token.  The  KPOINTS, BANDS,  \nLMVALUES tokens can be left out in which case their default values  \nwill be used.  You can have any number of cases.  The above  \nexample will calculate a PDOS with projections onto atom 1\nfor all kpoints, bands, and s,p,d, and f (case 1) added to the\nprojection onto atom 2 for kpoints 1-3, band 1, and the Pz orbital.\nI believe you can create any desired projections with this input\nfile.  The LMVALUES use the following correspondence between  \nnumerical input and orbitals projected.\n\nInput number: 1 2  3  4  5    6   7   8   9   10     11    \nOrbitals:     S Py Pz Px Ptot Dxy Dyz Dz2 Dxz Dx2-y2 Dtot\nInput number: 12 13 14 15 16 17 18 19   20\nOrbitals:     F1 F2 F3 F4 F5 F6 F7 Ftot Tot\n\nI have not done the work to figure out which of the standard\nf-orbital functions correspond to F1-F7.  \n\nThis is only tested for version 4.4.5.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--pearson_symbol": {"optional_attributes": [], "attributes": [], "description": "Returns the Pearson symbol of the structure.\nCheck aflow --readme=symmetry\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--pearson"], "inputs": [" POSCAR"]}, "--planedens": {"optional_attributes": [], "attributes": [], "description": "This finds the charge density in a plane.  The input file dens2d.in  \nhas the form\nD # Coordinates for following points (Direct/Cartesian)\nscale # Scale factor - edges of plane get mult. by this (but not origin).\nx y z # origin point\nx y z # X axis\nx y z # Y axis\nNx Ny # Number of X and Y grid points\nMiddle # Location for origin (Middle/Corner).\nOrtho # Whether to use Y orthogonal to X (Ortho/Strict).\nThe output consists of 4 files, dens.[tot/diff/up/dn].out.  Each  \nhas the same format, consisting of rows of density values, each  \nrow corresponding to a value along the X axis and each column\nto a value along the Y axis.  The format can be read directly  \ninto Excel and easily into MatLab.  This routine uses the same  \nroutine as --chgint to read in the CHGCAR and should work\nfor the same versions of vasp (see --chgint for more information).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--platon": {"optional_attributes": ["EQUAL | EXACT"], "attributes": [], "description": "This finds the space group.  aflow is creating an output\nfile, which is piped into a script platonSG, which uses the\nprogram platon.\nWraps input file for Platon ADDSYM package:\nCALC ADDSYM (EQUAL) (EXACT) (ang d1 d2 d3)\nwhere:\nEQUAL - Search with all atom type treated as equivalent.\nEXACT - All atoms should fit for given criteria.\nang - Angle criterium in search for metrical symmetry of the\nlattice (default 1.0 degree).\nd1 - Distance criterium for coinciding atoms for non-inversion\n(pseudo)symmetry elements (default 0.25 Angstrom).\nd2 - Distance criterium for coinciding atoms for (pseudo)\ninversion symmetry (default 0.25 Angstrom).\nd3 - Distance criterium for coinciding atoms for (pseudo)\ntranslation symmetry (default 0.25 Angstrom).\nThe defaults are specified in aflow_xatom.cpp as\n#define PLATON_TOLERANCE_ANGLE 1.0\n#define PLATON_TOLERANCE_D1 0.25\n#define PLATON_TOLERANCE_D2 0.25\n#define PLATON_TOLERANCE_D3 0.25\nTo get the space group, type\naflow -platon < POSCAR | platonSG\nTo just get see the output file from aflow, type\naflow -platon < POSCAR\nTo check for errors and see output from platon, type\naflow -platon < POSCAR | platon -o\nNote that the added flags above do not seem to work.  To change tolerance\ncreate output file from aflow, and then add the four tolerances\nafter CALC ADDSYM (on the same line).  Then pipe this file to platonSG.\nAflow will use your atom labels if they are there.  If you\ngive no atom labels it will use defaults for each atom type,\n(these are He,Li,Be,B,C, and then W for all remaining atom types).\nWARNING: If you have more than 6 atom types the W default\nwill give the wrong space group. The equal flag may not work.\nAtoms labeled with H do not get read by default in platon.\nDo not use H labels.\nSEE: http://www.cryst.chem.uu.nl/platon/pl000401.html\nNote: it works with platon.f and xdrvr.c > 51108\nplaton must be accessible on the path !\t  \n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--platonSG": {"optional_attributes": ["EQUAL | EXACT"], "attributes": [], "description": "This prints out the space group without bothering with the wrap ups.\nNote: it works with platon.f and xdrvr.c > 51108\nplaton must be accessible on the path !\t  \n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--platonSG_label": {"optional_attributes": ["EQUAL | EXACT"], "attributes": [], "description": "Same as above but prints ONLY the space group name.\t  \n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--platonSG_number": {"optional_attributes": ["EQUAL | EXACT"], "attributes": [], "description": "Same as above but prints ONLY the space group number.\t  \n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--plotband": {"optional_attributes": ["directory"], "attributes": [], "description": "Generate bandstructure plot using GNUPLOT and pdfLaTeX\nThe following files must reside in the directory:\nDOSCAR.static\nEIGENVAL.bands\nKPOINTS.bands\nPOSCAR.static\nDefaults.\nDirectory: default = ./\nEmin: The minimum value of the DOS plot. Default value: -10\nEmax: The maximum value of the DOS plot. Default value: 10\nOptional arguments:\n--keep=gpl: keep the gnuplot script\n--noshift: do not shift the Fermi level to zero\n--print: specify the format of the output image (default: pdf)\n--title: the title of the plot in LaTeX format (default: title in EIGENVAL file)\nExamples:\naflow --plotband=/common/DATA/ZnO,-8,6\naflow --plotband=./ --print=gpl --print=png --title=ZnO\n\n", "additional_flags": {"--keep": {}, "--noshift": {}, "--print": {}, "--title": {}}, "mandatory commands": {}, "equivalent commands": ["--plotbands"]}, "--plotband2": {"optional_attributes": ["directory"], "attributes": [], "description": "In this function, the DOS is the sum of spin-up and spin-down!\nThe following files must reside in the directory\nDOSCAR.static\nEIGENVAL.bands\nKPOINTS.bands\nOUTCAR.static\nDefaults.\nDirectory: default = ./\nEmin: The minimum value of the DOS plot. Default value -10\nEmax: The maximum value of the DOS plot. Default value 10\nDOSSCALE: The scale value of the DOS plot. Default value 1.2\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--plotband_spinsplit": {"optional_attributes": ["directory"], "attributes": [], "description": "This function generates spin-up and spin-down electronic band structure plots, respectively.\nThe following files must reside in the directory:\nEIGENVAL.bands\nKPOINTS.bands\nOUTCAR.bands\nDefaults.\nDirectory: default = ./\nEmin: The minimum value of the DOS plot. Default value -10\nEmax: The maximum value of the DOS plot. Default value 10\nDOSSCALE: The scale value of the DOS plot. Default value 1.2\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--plotbanddos": {"optional_attributes": ["directory"], "attributes": [], "description": "Generate combined bandstructure and DOS plot using GNUPLOT and pdfLaTeX\nThe following files must reside in the directory\nDOSCAR.static\nEIGENVAL.bands\nKPOINTS.bands\nPOSCAR.static\nNOTE: If the DOSCAR contains f-orbitals and the calculation was performed\nwith LORBIT = 10 and LSORBIT = .TRUE., either INCAR.static,\nvasprun.xml.static, or OUTCAR.static are required as well.\nDefaults.\nDirectory: default = ./\nEmin: The minimum value of the DOS plot. Default value: -10\nEmax: The maximum value of the DOS plot. Default value: 10\nDOSSCALE: The scale value of the DOS plot. Default value: no scaling\nOptional arguments:\n--keep=gpl: keep the gnuplot script\n--noshift: do not shift the Fermi level to zero\n--print: specify the format of the output image (default: pdf)\n--projection: Determines whether the DOS is projected along the atoms, l- or lm-resolved orbitals, or not at all (default: orbitals)\n--title: the title of the plot in LaTeX format (default: title in DOSCAR file)\nExamples:\naflow --plotbanddos=/common/DATA/ZnO,-8,6,1.5\naflow --plotbanddos=./ --print=png --projection=atoms\n\n", "additional_flags": {"--keep": {}, "--noshift": {}, "--print": {}, "--projection": {}, "--title": {}}, "mandatory commands": {}, "equivalent commands": []}, "--plotdos": {"optional_attributes": ["directory,"], "attributes": [], "description": "Plot a combined phonon dispersion and phonon DOS plot using GNUPLOT and pdfLaTex\nThe following files must reside in the directory\nPHDOSCAR\nDefaults.\nDirectory: default = ./\nEmin: The minimum value of the plot. Default value: minimum frequency\nEmax: The maximum value of the plot. Default value: maximum frequency\nDOSSCALE: The scaling factor of the DOS plot. Default value: no scaling\nOptional arguments:\n--keep=gpl: keep the gnuplot script\n--print: specify the format of the output image (default: pdf)\n--title: the title of the plot in LaTeX format (default: title in PHDOSCAR file)\n--unit: the unit of the phonon frequencies/energies (default: THz)\nExample:\naflow --plotphdos=./  --print=png --unit=cm-1\n\n", "additional_flags": {"--keep": {}, "--print": {}, "--title": {}, "--unit": {}, "-1": {}}, "mandatory commands": {}, "equivalent commands": []}, "--plotdosweb": {"optional_attributes": ["directory"], "attributes": [], "description": "Generate DOS plot using GNUPLOT\nThe following file must reside in the directory\nDOSCAR.static\nDefaults.\nDirectory: default = ./\nEmin: The minimum value of the DOS plot. Default value: -10\nEmax: The maximum value of the DOS plot. Default value: 10\nDOSSCALE: The scale value of the DOS plot. Default value: 1.2\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--plotpdos": {"optional_attributes": ["directory"], "attributes": [], "description": "Generate atom-projected DOS plot using GNUPLOT and pdfLaTeX\nThe following files must reside in the directory\nDOSCAR.static\nPOSCAR.static\nNOTE: If the DOSCAR contains f-orbitals and the calculation was performed\nwith LORBIT = 10 and LSORBIT = .TRUE., either INCAR.static,\nvasprun.xml.static, or OUTCAR.static are required as well.\nDefaults.\nDirectory: default = ./\nNumber atom: The atom index. Default value -1 (plot all inequivalent)\nEmin: The minimum value of the DOS plot. Default value: -10\nEmax: The maximum value of the DOS plot. Default value: 10\nDOSSCALE: The scale value of the DOS plot. Default value: no scaling\nOptional arguments:\n--keep=gpl: keep the gnuplot script\n--noshift: do not shift the Fermi level to zero\n--print: specify the format of the output image (default: pdf)\n--projection: Determines whether the DOS is projected along the l- or lm-resolved orbitals, or not at all (default: orbitals)\n--title: the title of the plot in LaTeX format (default: AFLOW-formatted title based on title in DOSCAR file)\nExamples:\naflow --plotpdos=/common/DATA/ZnO,-1,-8,6,1.2\naflow --plotpdos=./,2 --print=png\n\n", "additional_flags": {"--keep": {}, "--noshift": {}, "--print": {}, "--projection": {}, "--title": {}}, "mandatory commands": {}, "equivalent commands": ["--plotpedos"]}, "--plotpdosall": {"optional_attributes": ["directory"], "attributes": [], "description": "Generate atom-projected DOS plots of all inequivalent atoms using GNUPLOT and pdfLaTeX\nThe following files must reside in the directory\nDOSCAR.static\nPOSCAR.static\nNOTE: If the DOSCAR contains f-orbitals and the calculation was performed\nwith LORBIT = 10 and LSORBIT = .TRUE., either INCAR.static,\nvasprun.xml.static, or OUTCAR.static are required as well.\nDefaults.\nDirectory: default = ./\nEmin: The minimum value of the DOS plot. Default value: -10\nEmax: The maximum value of the DOS plot. Default value: 10\nDOSSCALE: The scale value of the DOS plot. Default value: no scaling\nOptional arguments:\n--keep=gpl: keep the gnuplot script\n--noshift: do not shift the Fermi level to zero\n--print: specify the format of the output image (default: pdf)\n--projection: Determines whether the DOS is projected along the l- or lm-resolved orbitals, or not at all (default: orbitals)\n--title: the title of the plot in LaTeX format (default: AFLOW-formatted title based on title in DOSCAR file)\nExamples:\naflow --plotpdosall=/common/DATA/ZnO,-1,-8,6,1.2\naflow --plotpdosall=./ --print=png\n\n", "additional_flags": {"--keep": {}, "--noshift": {}, "--print": {}, "--projection": {}, "--title": {}}, "mandatory commands": {}, "equivalent commands": ["--plotpedosall"]}, "--plotpedosall_nonquivalent": {"optional_attributes": ["directory"], "attributes": [], "description": "Usage: aflow  --plotpedosall_nonquivalent[=directory[,DOS_Emin[,DOS_Emax[,DOSSCALE]]]]\nGenerate PDOS plots of all the inquivalent atoms using GNUPLOT.\nThe following files must reside in the directory\nDOSCAR.static\nOUTCAR.static\nPOSCAR.relax1\nDefaults.\nDirectory: default = ./\nEmin: The minimum value of the DOS plot. Default value -10\nEmax: The maximum value of the DOS plot. Default value 10\nDOSSCALE: The scale value of the DOS plot. Default value 1.2\nUse --keep=gnuplot (--keep=GPL) to keep the GNU plot code.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--plotphdisp": {"optional_attributes": ["directory,"], "attributes": [], "description": "Plot the phonon dispersion using GNUPLOT and pdfLaTex\nThe following files must reside in the directory\nPHDOSCAR\nPHEIGENVAL\nPHKPOINTS\nPHPOSCAR\nDefaults.\nDirectory: default = ./\nEmin: The minimum value of the plot. Default value: minimum frequency\nEmax: The maximum value of the plot. Default value: maximum frequency\nOptional arguments:\n--keep=gpl: keep the gnuplot script\n--print: specify the format of the output image (default: pdf)\n--title: the title of the plot in LaTeX format (default: title in PHEIGENVAL file)\n--unit: the unit of the phonon frequencies/energies (default: THz)\nExample:\naflow --plotphdisp=./  --print=png --unit=cm-1\n\n", "additional_flags": {"--keep": {}, "--print": {}, "--title": {}, "--unit": {}, "-1": {}}, "mandatory commands": {}, "equivalent commands": ["--plotphonondispersion", "--pphdis"]}, "--plotphdispdos": {"optional_attributes": ["directory,"], "attributes": [], "description": "Plot a combined phonon dispersion and phonon DOS plot using GNUPLOT and pdfLaTex\nThe following files must reside in the directory\nPHDOSCAR\nPHEIGENVAL\nPHKPOINTS\nPHPOSCAR\nDefaults.\nDirectory: default = ./\nEmin: The minimum value of the DOS plot. Default value: minimum frequency\nEmax: The maximum value of the DOS plot. Default value: maximum frequency\nDOSSCALE: The scaling factor of the DOS plot. Default value: no scaling\nOptional arguments:\n--keep=gpl: keep the gnuplot script\n--print: specify the format of the output image (default: pdf)\n--title: the title of the plot in LaTeX format (default: title in PHDOSCAR file)\n--unit: the unit of the phonon frequencies/energies (default: THz)\nExample:\naflow --plotphdispdos=./  --print=png --unit=cm-1\n\n", "additional_flags": {"--keep": {}, "--print": {}, "--title": {}, "--unit": {}, "-1": {}}, "mandatory commands": {}, "equivalent commands": []}, "--plotthermo": {"optional_attributes": ["directory"], "attributes": [], "description": "Plots the APL thermal properties such as vibrational free energy, entropy, and heat capacity\nusing GNUPLOT and pdfLaTeX.\nThe following file must reside in the directory:\naflow.apl.thermal_properties.out\nDefaults.\nDirectory: default = ./\nTmin: The minimum temperature of the plot. Default value: 0 K\nTmax: The maximum temperature of the plot. Default value: maximum temperature\nOptional arguments:\n--keep=gpl: keep the gnuplot script\n--print: specify the format of the output image (default: pdf)\n--title: the title of the plot in LaTeX format (default: SYSTEM in out file)\nExample:\naflow --plotthermo=./,100,300\n\n", "additional_flags": {"--keep": {}, "--print": {}, "--title": {}}, "mandatory commands": {}, "equivalent commands": []}, "--plotcond": {"optional_attributes": ["directory"], "attributes": [], "description": "Plots the AAPL thermal conductivity using GNUPLOT and pdfLaTeX.\nThe following file must reside in the directory:\naflow.aapl.thermal_conductivity.out\nDefaults.\nDirectory: default = ./\nTmin: The minimum temperature of the plot. Default value: 0 K\nTmax: The maximum temperature of the plot. Default value: maximum temperature\nOptional arguments:\n--keep=gpl: keep the gnuplot script\n--print: specify the format of the output image (default: pdf)\n--title: the title of the plot in LaTeX format (default: SYSTEM in out file)\nExample:\naflow --plottcond=./,100,300\n\n", "additional_flags": {"--keep": {}, "--print": {}, "--title": {}}, "mandatory commands": {}, "equivalent commands": ["--plothermalconductivity"]}, "--pocc_dos": {"optional_attributes": ["directory"], "attributes": [], "description": "Generate density of states (DOS) plot at different temperature for a partial occupation structure.\nIf not specified, default directory is ./, temperature is 300K, DOS_Emin=-5 eV, DOS_Emax=5 eV, and DOSSCALE=1.2.\nExample: aflow --pocc_dos=./,300\nMore details about how to do this can be found in \"README_AFLOW_POCC.TXT\".\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--pocc_mag": {"optional_attributes": ["directory"], "attributes": [], "description": "Calculate magnetic moment at different temperature for a partial occupation structure.\nIf not specified, default directory is ./, temperature is 300K, DOS_Emin=-5 eV, DOS_Emax=5 eV, and DOSSCALE=1.2.\nExample: aflow --pocc_mag=./,300\nMore details about how to do this can be found in \"README_AFLOW_POCC.TXT\".\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--pocc_bandgap": {"optional_attributes": ["directory"], "attributes": [], "description": "Calculate band gap at different temperature for a partial occupation structure.\nIf not specified, default directory is ./, temperature is 300K, DOS_Emin=-5 eV, DOS_Emax=5 eV, and DOSSCALE=1.2.\nExample: aflow --pocc_bandgap=./,300\nMore details about how to do this can be found in \"README_AFLOW_POCC.TXT\".\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--pocc": {"optional_attributes": [], "attributes": [], "description": "Outputs occupations calculated from projections onto spherical  \nharmonics for each ion for many combinations of L, M, bands,  \nand kpoints.  This works with version 445 and has not been tested  \non any other version (and probably won't work).  To make this work\nyou need to do the following\n-- Use slightly altered version of vasp (see below)\n-- set LORBIT=2 in INCAR (see below)\n-- Set ISYM=0 in INCAR (see below)\n-- Set RWIGS in INCAR (see below)\nHere is why you need to do these things (feel free to skip this).\nThe --pocc option reads the PROOUT file, which is produced by  \nrunning vasp with LORBIT=2 in the INCAR file.  There is an  \nannoying subtle point here. I am not sure I totally get this  \nbut here is my best understanding.  The projection onto the  \nspherical harmonics actually uses some atomic like radial  \nfunctions (bessel functions).  This means that for each  \nspherical harmonic there are multiple states, corresponding  \nto different atomic energy levels and radial functions.  \nWrite the projection of band n, at kpt k, onto spherical harmonic  \nwith angular quantum numbers l,m and energy level e as Pnklme.  \nAs compiled, the vasp code outputs projections Pnklm, summing  \nover the e parameter.  This makes each projection a sum of  \ncomplex numbers, allowing some cancellations.  However, for  \noccupations, like those output in PROCAR (LORBIT=1) and OUTCAR,  \nthe summations over e are done with the squares of the Pnklme.  \nThis makes sense, since you want to add up probabilities,  \nnot amplitudes, to get an occupation.  Unfortunately, from  \nthe output Pnklm one cannot reconstruct the Pnklme, so the  \nouptut in PROOUT is not enough to reproduce the occupations.\nTherefore, I suggest the following.  Recompile vasp with following\nmodifications to sphpro.F\nchange line 252\nWRITE(IUP,'(9F12.6)') CSUM_PHASE\nto\nwrite(IUP,'(9F12.6)') CSUM_ABS\nCSUM_ABS is a complex variable but the imaginary part is zero.  It\nis the squared amplitude for each projection.  Note that this is  \na probability.  You use it directly (do not square it) to get  \noccupations.  Note that the augmentations are added to this real  \nnumber, and are therefore probablities, not amplitudes.  \nThis makes sense when you look at the code in sphpro.F that  \ncalculates the augmentation portion.  The augmentations can be  \n<0, which I assume corresponds to reducing the probability of  \nfinding electrons.  This make me a little uncomfortable but  \nI guess it is OK.  At this point the aflow code assumes  \nthe above modification and uses the magnitude of the projections\nto calculate all occupations (not the magnitude squared).  \nAlso, there is another subtle point with the kpoints.  If  \nyou use symmetry certain sets of symmetry equivalent kpoints  \n(a star) are represented by a single irreducible kpoint.  We  \nare used to ignoring this and simply weighting things associated  \nwith the irreducible kpoint appropriately to account for the  \nwhole star.  However, the projections onto different orbitals  \nare not the same for all the points in a star.  For example,  \nthe kpoints (0.1,0,0),(0,0.1,0),(0,0,0.1) may all be in the  \nsame star in fcc, but states associated with them will project  \ndifferently onto Px orbitals.  Therefore, if you use irreducible\nkpoints you will get the wrong projections (it seems like you\ndo get the right totals for S,P, and D, bit I am not sure that  \nis always the case).  To be safe, don't use any symmetry -- i.e.,\nset ISYM=0 in the INCAR file.\nYou must set RWIGS so that the code knows the radius of\nthe spheres onto which it projects.  \nTo make sure all is in order you can look at the total  \noccupations for each ion in OUTCAR.  These should match  \nthe Occupations vs. ION:LM values in the output of aflow  \n(the last lines in the output).  A more detailed check is  \nto run vasp with LORBIT=1 and compare the PROCAR file with  \nthe output of aflow.  I am not sure that this will all  \nwork the same way with PAW potentials.  \n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--pointgroup": {"optional_attributes": ["tolerance| =tight| =loose"], "attributes": [], "description": "Calculates the point group symmetry of the lattice {R} and writes\nit in the aflow.pgroup.out file. See documentation of aflow.\nThis routine consists of symmetry consistency checks. If symmetry rules are broken,\nthe code automatically changes tolerance and recalculates from the beginning.\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must not be below the minimum\ninteratomic distance, otherwise an error will be thrown.)\nOptions:\n[--no_scan] : Will not perform tolerance scan.\n[--print=txt | --print=json] : Specify output format.\n[--screen_only] : Prints symmetry elements to string and does not write to a file.\nCheck aflow --readme=symmetry\n", "additional_flags": {"--no_scan": {}, "--print": {}, "--screen_only": {}}, "mandatory commands": {}, "equivalent commands": ["--pgroup"], "inputs": [" POSCAR"]}, "--pointgroup_crystal": {"optional_attributes": ["tolerance| =tight| =loose"], "attributes": [], "description": "Calculate the point group symmetry of the crystal {R+atoms} and\nwrites it the aflow.pgroup_xtal.file.  \nThis routine consists of symmetry consistency checks. If symmetry rules are broken,\nthe code automatically changes tolerance and recalculates from the beginning.\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must not be below the minimum\ninteratomic distance, otherwise an error will be thrown.)\nMagnetic analysis:\nThe magnetic tag specifies the magnetic moment on each of the atoms.  The\ntwo input formats are a comma separated string of the magnetic moments -\nin the same order as the input file, the location of the INCAR, or the location\nof the OUTCAR, which is then read and the magnetic moment for each atom is found\n(must be a static calculation, otherwise this information isn't specified).\nWorks for both collinear and non-collinear systems (AFLOW autodetects\ncollinear/non-collinear based on the input).\nOptions:\n[--no_scan] : Will not perform tolerance scan.\n[--print=txt | --print=json] : Specify output format.\n[--screen_only] : Prints symmetry elements to string and does not write to a file.\n[--mag|--magnetic|--magmom=[m1,m2,...|INCAR|OUTCAR]]: Perform symmetry analysis of spin system, where spin degree of freedom breaks symmetry \nCheck aflow --readme=symmetry\n", "additional_flags": {"--no_scan": {}, "--print": {}, "--screen_only": {}, "--mag": {}, "--magnetic": {}, "--magmom": {}}, "mandatory commands": {}, "equivalent commands": ["--pgroup_crystal", "--pgroup_xtal"], "inputs": [" POSCAR"]}, "--pointgroupklattice": {"optional_attributes": ["tolerance| =tight| =loose"], "attributes": [], "description": "Calculates the point group symmetry of the klattice {K} and writes\nit in the aflow.pgroupk.out file. See documentation of aflow.\nThis routine consists of symmetry consistency checks. If symmetry rules are broken,\nthe code automatically changes tolerance and recalculates from the beginning.\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must not be below the minimum\ninteratomic distance, otherwise an error will be thrown.)\nOptions:\n[--no_scan] : Will not perform tolerance scan.\n[--print=txt | --print=json] : Specify output format.\n[--screen_only] : Prints symmetry elements to string and does not write to a file.\nCheck aflow --readme=symmetry\n", "additional_flags": {"--no_scan": {}, "--print": {}, "--screen_only": {}}, "mandatory commands": {}, "equivalent commands": ["--pgroupk"], "inputs": [" POSCAR"]}, "--pointgroupkcrystal": {"optional_attributes": ["tolerance| =tight| =loose"], "attributes": [], "description": "Calculates the dual of the crystal point group symmetry operations and writes\nit in the aflow.pgroupk_xtal.out file. See documentation of aflow.\nThis routine consists of symmetry consistency checks. If symmetry rules are broken,\nthe code automatically changes tolerance and recalculates from the beginning.\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must not be below the minimum\ninteratomic distance, otherwise an error will be thrown.)\nMagnetic analysis:\nThe magnetic tag specifies the magnetic moment on each of the atoms.  The\ntwo input formats are a comma separated string of the magnetic moments -\nin the same order as the input file, the location of the INCAR, or the location\nof the OUTCAR, which is then read and the magnetic moment for each atom is found\n(must be a static calculation, otherwise this information isn't specified).\nWorks for both collinear and non-collinear systems (AFLOW autodetects\ncollinear/non-collinear based on the input).\nOptions:\n[--no_scan] : Will not perform tolerance scan.\n[--print=txt | --print=json] : Specify output format.\n[--screen_only] : Prints symmetry elements to string and does not write to a file.\n[--mag|--magnetic|--magmom=[m1,m2,...|INCAR|OUTCAR]]: Perform symmetry analysis of spin system, where spin degree of freedom breaks symmetry \nCheck aflow --readme=symmetry\n", "additional_flags": {"--no_scan": {}, "--print": {}, "--screen_only": {}, "--mag": {}, "--magnetic": {}, "--magmom": {}}, "mandatory commands": {}, "equivalent commands": ["--pointgroupk_xtal"], "inputs": [" POSCAR"]}, "--pgl": {"optional_attributes": [], "attributes": [], "description": "Calculate the point group symmetry of the lattice {R} and\nprints it to stdout.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--pgx": {"optional_attributes": [], "attributes": [], "description": "Calculate the point group symmetry of the crystal {R+atoms} and\nprints it to stdout.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--pomass": {"optional_attributes": ["directory"], "attributes": [], "description": "Outputs from the available POTCAR/OUTCAR the sum of POMASS.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--pomass_atom": {"optional_attributes": ["directory"], "attributes": [], "description": "Outputs from the available POTCAR/OUTCAR and POSCAR/CONTCAR the POMASS of the cell per atom.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--pomass_cell": {"optional_attributes": ["directory"], "attributes": [], "description": "Outputs from the available POTCAR/OUTCAR and POSCAR/CONTCAR the POMASS of the whole cell.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--poscar": {"optional_attributes": [], "attributes": [], "description": "Converts the ABCCAR in POSCAR format.\nABCCAR is described as:\nTITLE\nSCALE (positive (rescaling) negative (volume))\nA B C ALPHA BETA GAMMA\n#specie0 #specie1 ....\nDIRECT (or CARTESIAN)\n.. .. .. specie0\n.. .. .. specie0\n. . .\n.. .. .. specie1\n.. .. .. specie1\nand so on. (Stefano Feb 2009)\nConverts the WYCCAR IN POSCAR format.\nWYCCAR is described as\nTITLE\nSCALE (positive (rescaling) negative (volume))\nA B C ALPHA BETA GAMMA SG# [OPTION#]\n#specie0 #specie1 ....\nDIRECT (or CARTESIAN)\n.. .. .. specie0\n.. .. .. specie0\n. . .\n.. .. .. specie1\n.. .. .. specie1\nand so on. (Stefano Feb 2009)\nThe positions of the species will be used with the list of\nsymmetry operations (aflow_wyckoff.cpp) to generate all the atoms.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" ABCCAR ", " WYCCAR"]}, "--poscar2aflowin": {"optional_attributes": [], "attributes": [], "description": "Makes an \"almost standard\" aflow.in starting from the poscar.\nUseful for scripting (SC100630).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--poscar2enum": {"optional_attributes": [], "attributes": [], "description": "Convert a POSCAR into an input format for MULTIENUM (partial occupation).\nThis is useful for debuging MULTIENUM.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--poscar2gulp": {"optional_attributes": [], "attributes": [], "description": "Convert a POSCAR into an input format for gulp program.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--poscar2wyckoff": {"optional_attributes": [], "attributes": [], "description": "Outputs to Wyckoff positions using findsym.\nNote that you may find more detailed information just using aflow --findsym < POSCAR if you can not understand it very clearly.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--prepare_chgcar_4_jmol=": {"optional_attributes": [",CHGACAR2,..."], "attributes": "|", "description": "\noptions:\n[ --usage ]\n[ --outcar=OUTCAR ] \n[ --zip ]\n\nModify the header of a CHGCAR file so it can be read by Jmol.\nJmol requires species to be specified in the comment line of the CHGCAR file (first line).\nThis code requires an OUTCAR to read in the species.\nUnless specified, it will first look for OUTCAR file in the directory of the CHGCAR, then it will\nlook in the directory from which the command is called. \nThe CHGCAR and OUTCAR files may be compressed, and the edited CHGCAR file can be recompressed \n(if it was previously) by specifying the --zip command.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--prep4jmol"]}, "--prim": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a POSCAR file with a\nprimitive unit cell.  In the primitive cell finding\nfunction I look for a primitive cell by considering\nas candidate cell vectors every possible triad of 3\nvectors that can be made from the original cell vectors\nor the basis vectors which translate the lattice onto\nitself.  I then take the triad with the smallest volume\nto be the primitive cell.  If there are multiple\ncandidates I take the ones with the largest projections\nonto the original lattice vectors.  See the rouinte\nGetPrim.cc for more information. NOTE: the algorithm is by SC\ndifferent from the old DM aflow approace).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--primr": {"optional_attributes": [], "attributes": [], "description": "Returns the primitive, Minkowski reduced cell, using a fast(er) routine. (R. Taylor).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--fastprimitivecell", "--fprim"], "inputs": [" POSCAR           "]}, "--proto=": {"optional_attributes": [":specieA*", [":specieB*"], "..", [":volumeA*", [":volumeB*"], ".. | :volume"]], "attributes": "label*", "description": "This command prints out a prototype of label=\"label\" with speciesA,speciesB,.... (non mandatory)\nof volumes per atom \"volumeA, volumeB...\" (not mandatory) or with standard volume per atom = \"volume\".\nNote that that --proto label A B ... is not supported anymore and you now need to use\n--proto=label:A:B... et cetera.\n\nQUANTUM ESPRESSO output                                                                     \nIf you specify --qe, aflow will add QUANTUM ESPRESSO code to aflow.in (experimental).   \n\nABINIT output                                                                     \nIf you specify --abinit, aflow will add ABINIT code to aflow.in (experimental).   \n\nAIMS output                                                                     \nIf you specify --aims, aflow will add AIMS code to aflow.in (experimental).  \n\nANRL: AFLOW NAVAL RESEARCH LAB PROTOTYPE LIBRARY\nWith respect to the article:\nMehl et al., \"The AFLOW Library of Crystallographic Prototype\", https://arxiv.org/abs/1607.02532\nthe code gives the possibility to define the parameters of the cell --params=...\nSome rhombohedral cells can be generated in hexagonal configurations (see the article).\nThe choice is performed with the flag --hex.\nCheck aflow --readme=anrl \n\n\n", "additional_flags": {"--params": {}}, "mandatory commands": {}, "equivalent commands": []}, "--prototype": {"optional_attributes": [], "attributes": [], "description": "Converts a structure (file) into its corresponding standard AFLOW prototype label. \nThe parameter variables (degrees of freedom) and parameter values are also listed.\nInformation about the label and parameters are described in the AFLOW Library of Crystallographic Prototypes:\nPart 1 (doi=10.1016/j.commatsci.2017.01.017), \nPart 2 (doi=10.1016/j.commatsci.2018.10.043), \nor README_AFLOW_ANRL.TXT.\n\nOptions:\n[--setting=1|2|anrl] : Specify the space group setting for the conventional cell/Wyckoff positions.  \nThe `anrl' setting follows the choices of the AFLOW Library of Crystallographic Prototypes: \n- axis-b for monoclinic space groups, \n- rhombohedral setting for rhombohedral space groups, and \n- origin centered on the inversion for centrosymmetric space groups \n(default: anrl).\n\n\n", "additional_flags": {"--setting": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" file             "]}, "--prototype_labels": {"optional_attributes": [], "attributes": [], "description": "Returns a list of the AFLOW prototype labels.\nThe labels can be filtered by arity, stoichiometry, and space group.\noptions:\n[--library] : specify library/catalog, i.e., htqc, anrl, or all (default=all)\n[--arity=<number>] : specify 1=unary, 2=binary, 3=ternary, etc.\n[--stoichiometry=<number>:<number>:...] : specify the stoichiometry\n[--space_group_number=<number>] : specify the space group number\n\n", "additional_flags": {"--library": {}, "--arity": {}, "--number_of_species": {}, "--species_count": {}, "--stoichiometry": {}, "--stoich": {}, "--space_group_number": {}, "--space_group": {}, "--sg": {}}, "mandatory commands": {}, "equivalent commands": ["--proto_labels"]}, "--prototypermult": {"optional_attributes": [], "attributes": [], "description": "Inputs 3 to 10 ary POSCARS, outputs the first alloy of prototype\ngroup, which is categoried by --protoclassify, from ICSD database.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--PROTOTYPERMULT"], "inputs": ["POSCAR"]}, "--prototypes": {"optional_attributes": [], "attributes": [], "description": "Give the list of prototypes (file LIST.txt) from the DMQC-HTQC\nproject (SC oct 08)\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--protos"]}, "--pseudopotentials_check=": {"optional_attributes": ["POTCAR|OUTCAR", "\"\"|.bz2|.gz|.xz"], "attributes": " | --pp_check= | --ppk=", "description": "Returns unique identification information about the\npseudopotentials used for the calculations.   \n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--prototypes_icsd": {"optional_attributes": ["N", "N"], "attributes": [], "description": "Give the list of prototypes from the ICSD database included in the code.   \nIf N is passed, then it returns ONLY the N-ary compounds.\nIf the ICSD_AFLOW_LIBRARY is not available, the code switches to downloading\ninformation from the server=aflowlib.duke.edu database.\nYou can force downloading from different servers:\n--server=aflowlib.duke.edu\n--server=materials.duke.edu\n--server=default (switches to aflowlib.duke.edu)\n\n", "additional_flags": {"--server": {}}, "mandatory commands": {}, "equivalent commands": []}, "--proto_icsd=": {"optional_attributes": [], "attributes": "label                                  ", "description": "Returns the prototype labeled with the string label, from the             \nICSD database.                                                            \nExample: aflow --proto_icsd=Ba1Ga4_ICSD_659522\nExample: aflow --aflowlib.duke.edu --proto_icsd=Ba1Ga4_ICSD_659522\nIf the ICSD AFLOW_LIBRARY is not available, the code switches to downloading\ninformation from the  server=aflowlib.duke.edu database.\nYou can force downloading from different servers:\n--server=aflowlib.duke.edu\n--server=materials.duke.edu\n--server=default (switches to aflowlib.duke.edu)\nThe label can be of this type:\n--proto_icsd=ICSD_number.{ABC}[:speciesA*[:speciesB*]..[:volumeA*[:volumeB*].. | :volume]]\"\n--proto_icsd=label_ICSD_number\"\n\n", "additional_flags": {"--server": {}, "--vasp": {}, "--qe": {}, "--abinit": {}, "--aims": {}}, "mandatory commands": {}, "equivalent commands": []}, "--qe": {"optional_attributes": [], "attributes": [], "description": "Transforms the POSCAR (or whicever is the input file format) to a              \nQUANTUM ESPRESSO GEOM format.                                                  \nThe geometrical file follows the QE convention (see ibrav in QE manual).   \n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--qmvasp": {"optional_attributes": [], "attributes": [], "description": "Given the current directory (or the one specified by -D), aflow\nproduces the file aflow.qmvasp.out containing thermodynamic information\nfrom relax2 CONTCAR/OSZICAR/OUTCAR (or .static if --static is specified).\n\n", "additional_flags": {"--static": {}, "-D": {}}, "mandatory commands": {}, "equivalent commands": []}, "--rasmol": {"optional_attributes": ["n1"], "attributes": [], "description": "Similar to --xyz. Starts rasmol (must be available) with a file\nbased on the POSCAR input file. If you want to use atom names\nyou must put them after each atom  position in the POSCAR\nfile (see -names). If any names are missing they are defaulted to H.\nIf no numbers are specified, aflow takes \"1 1 1\". (SC/OCT07,OCT14)\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--raytrace": {"optional_attributes": [], "attributes": [], "description": "Outputs jpeg or mpeg pictures created by ray tracing.  This  \nis a rather elaborate routine.  The basic idea is that it\ntakes as input a list of structures (in POSCAR like format)  \nand converts them into a dat file, inputs that into the ray  \ntracing program tachyon, then takes the tga file output by  \ntachyon and uses convert to make it a jpeg, then if needed  \ntakes all the jpegs and puts them together into and mpg using  \nmpeg_encoder.  Therefore the following programs must be  \ninstalled and in your path: tachyon, convert, mpeg_encoder  \n(only if making a movie).  There is an input file rtfile  \nwhich contains tokens setting characteristics of the calculation\nand the ray traced picture.  This input file looks like the  \nfollowing:          \n\n# These set the input for the ray tracing program tachyon\nCALCTYPE = 0 #0=strlist\nINFILE = strlist # For CALCTYPE=0\nOUTFILE = XXX # All ouput will have this prefix.\nRESX = 600 # X pixels in images.\nRESY = 500 # Y pixels in images.\nZOOM = 1.5 # Like a zoom lens.\nASPECTRATIO = 1 # Y height / X height.\nANTIALIASING = 0 # Something to do with extra accuracy.\nRAYDEPTH = 12 # Number of reflections to keep in ray trace.\n# x,y,z of camera location.  Changes incrementally each frame  \n# from initial to final value.  format is ciX cfX ciY cfY ciZ cfZ,  \n# where i,f denote initial and final, respectively.\n# Default is displaced along -Y from structure center.\n#CENTER = 1 1 -2 -2 2 4\n#VIEWDIR = 1 0 0 # Direction of camera viewing.\n#UPDIR = 0 0 1 # Up direction for picture.\nBACKGROUND = 0.3 0.1 0.1 # Background lighting (all lights are R G B).\nLIGHT = -20 -20 -20  0.01 1.0 1.0 1.0 # Spherical light source: center(3) radius(1) color(3)\nLIGHT = 20 20 20  0.01 1.0 1.0 1.0 # Spherical light source: center(3) radius(1) color(3)\nATOMTEXTURE = 1 0.1 0.9 0.0  1.0 # atomtype ambient diffuse specular opacity\nATOMTEXTURE = 2 0.1 0.9 0.0  1.0 # atomtype ambient diffuse specular opacity\nATOMTEXTURE = 3 0.1 0.9 0.0  1.0 # atomtype ambient diffuse specular opacity\nATOMTEXTURE = 4 0.2 0.9 0.3  1.0 # atomtype ambient diffuse specular opacity\nATOMCOLOR = 1 1.0 0.75 0.3 # atomtype(1) color(3)\nATOMCOLOR = 2 0.2 0.4 1.0 # atomtype(1) color(3)\nATOMCOLOR = 3 1.0 1.0 1.0 # atomtype(1) color(3)\nATOMCOLOR = 4 1.0 0.0 0.0 # atomtype(1) color(3)\nATOMRAD = 1 0.6 # atomtype rad\nATOMRAD = 2 0.3 # atomtype rad\nATOMRAD = 3 1.0 # atomtype rad\nATOMRAD = 4 0.8 # atomtype rad\nSHADING = mediumshade # fullshade,mediumshade,lowshade,lowestshade  \n# A supercell matrix given as 9 reals:  a11 a12 a13 a21 a22 a23  \n# a31 a32 a33.  Note that using this moves all atoms into images\n# the unit cell.\n# Default = 1 0 0 0 1 0 0 0 1\nSUPERCELL = 1 0 0   0 1 0  0 0 1  \n# Rotation around x,y,z axis through structure_origin\n# (counterclockwise).  Rotation take place incrementally each\n# frame.  Rotation goes from initial to final value.  \n# format is riX ifX riY rfY riZ rfZ, where i,f denote initial\n# and final, respectively.\n# Default = 0 0 0 0 0 0\nROTATION = 0 0 0 0 -180 180\n# The zero for the structure coordinates and lattice parameters.\n# Rotations occur around this point.\n# Default = First moment of atom positions.\nSTRUCTURE_ORIGIN = 0 0 0  \nPLANE = 1 # 0 for no plane, 1 for plane.\nPLANECENTER = 0 0 -9.21016 # X Y Z for center of plane.\nPLANENORMAL = 0 0 1 # Direction of plane normal.\nPLANECOLOR = 1 1 1 # R G B for plane color.\nPLANETEXTURE = 0.3 0.6 0.8 1.0 # ambient diffuse specular opacity for plane.\n\nTokens can be in any order, whitespace is ignored, and anything\nfollowing a # on a line is ignored.  The CENTER, VIEDDIR, and  \nUPDIR depend on the structure and can be a pain to set by hand  \nso they have fairly elaborate defaults that seem to usually work  \nfine.  The other values are not bad places to start.  For  \nmore info about these check out the tachyon documentation.\n\nFor a single structure the output consists of XXX.dat, XXX.tga,\nXXX.jpg, XXX.enc, XXX.mpg.  Having all these files is useful  \nif some part of the program did not exectute properly and you  \nneed to do steps by hand (tachyon XXX.dat produces XXX.tga,  \nconvert XXX.tga XXX.jpg produces XXX.jpg, and mpeg_encode XXX.enc\nproduces XXX.mpg).  For more than one structure the XXX.dat  \nand XXX.tga files are erased to avoid clutter.  The XXX.enc file  \nis used for the mpeg_encode programs and is totally set in  \naflow and the user has not control over it from the rtfile.  \nIf you want to alter it after it is output go ahead but I know  \nalmost nothing about how it works.  To make your own mpg from  \nthe jpg type:      mpeg_encode XXX.enc  \nThe tga, jpg files  can be viewed with xv and the mpg with mpeg_play.XXX\nNote: this routine was written by Dane and readapted by Stefano.\nIt might not work but require slightly modifications in the C++ source.\nTACHYON WEB:  http://jedi.ks.uiuc.edu/~johns/raytracer/\nMPEG_ENCODER: http://bmrc.berkeley.edu/frame/research/mpeg/mpeg_encode.html\nCONVERT:      http://www.imagemagick.org/script/index.php\nLINUX: Debian 4.0r1 contains convert (\"imagemagick\") and\nthe mpeg_encoder (\"ucbmpeg\").\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--rbanal": {"optional_attributes": [], "attributes": [], "description": "This is meant to allow you to analyse a rubber band calculation\nto get energy vs. distance along activation path. The distance\nis given a cumulative from the 00 to END images (a line integral),\nand also as the total distance from 00 and END for each image.\nThe first is the activation path, the others are for double checking.\nThe rubber band run must have had nim images.  The distance  \nbetween two images is defined to be the square root of the  \nsum of all the squared distances between all the atoms in the  \ntwo images.  The distances depend on the  \nsetting of nearest_image_flag (see --intpol).  The code works  \nin two steps.  First it gets energies and distances from the  \nOSZICAR and POSCAR/CONTCAR files, respectively.  This  \nrequires that it be run in the directory above all the image  \ndirectories.  The distances are obtained from POSCAR files  \nfor the first and last images, which are not actually calculated\nso now CONTCAR files exists.  For imtermediate images the\nPOSCAR files are used.  The energies are pulled from the\nOSZICAR files.  First, these do not exist in the first and  \nlast image directories, so you must put them their yourself\nbased on other runs (if you leave them out then no energies\nwill be obtained but you can add the energies later, as described\nbelow).  Second, the output format for OSZICAR in a parallel\nvasp rubber band run is all messed up.  Therefore, the energies\nare not E0 values (which are not the energy values of the  \nimages) but the free energy from the line just before the  \nlast E0.  This numbers differ somewhat from E0 values.  This\nwhole output formatting problem changes with version of vasp --  \nI set  it up for version 4.4.1 beta.  It should also work with\nv 454.   We should change it to use E0 as soon as possible.  \nOnce the distances and energies have been obtained then they  \nare interpolated with a cubic spline curve.  The spline  \ninterpolation assumes that the derivatives at the end points  \nare 0.  The E.vs.dist data and the spline interpolation are  \nboth output to standard out.  If there is any problem with  \nthe energy data (e.g., you need to add end members) then  \nyou can fix it and run the spline interpolation again  \nindependently (see --spline).  The spline interpolation is  \ndone on 50 points by default.  This can be  \nchanged by setting DEFAULT_NPT_FOR_SPLINE in aflow_pflow_funcs.cpp.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--rbdist": {"optional_attributes": [], "attributes": [], "description": "Gets the distance between two POSCAR files.  Uses lattice params  \nof POSCAR1.  For use of n|N|e|E see --intpol.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--rdf": {"optional_attributes": ["rmax"], "attributes": [], "description": "Get the radial distribution function (rdf) for a POSCAR file\nrmax: The radius out to which the rdf is calculated.\nnbins:  The number of bins for the rdf.\nsigma:  The sigma of the gaussian used to smear the rdf.\nThis also finds the nearest-nieghbor shells by looking at  \nwhere the rdf has minima.  The output gives the rdf and nn shells\nfor each atom and for each type of neighbour, including a sum\nof all neighbour types.  If you want to treat all atoms as the  \nsame (e.g., to look at the parent lattice) just set one\ntype in the POSCAR file.  You may need to play with sigma\nand the nbins to get atoms grouped together that you want in  \none shell but not to group atoms you want in different shells.\nOne apporach is to choose enough bins to make sure to distinguish\nevery shell of interest and the increase sigma until you group\ndesired atoms together.\nrmax default = 5\nnbins default = 25\nsigma default = 0 (zero does no smearing).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--rdfcmp=": {"optional_attributes": [], "attributes": "rmax,nbins,sigma,nshmax,POSCAR1,POSCAR2", "description": "Uses the radial distribution functions (rdf) for POSCAR 1 and 2  \nto assess how close the structures are.  For each atom the\nrdf and radial shell function (rsf - this gives the coordination\nnumbers for each shell) are found for each type.  \nThe shells are found by looking at the derivatives of the rdf.\nThen the atoms of the same types are compared and the rms  \nerrors in the rsf for POSCAR1 and POSCAR2 are computed.  Then  \nwe step through the atoms of POSCAR1, matching them up  \nwith the atoms of POSCAR2, based on the minimum rms.  When a  \nPOSCAR2 atom is matched it not considered for later matches.\nThe total rms based on these best matches is found by averaging  \nall the individual atom RMS's.  The total RMS and the  \nrsf for the best matched atoms are output.\nrmax: The radius out to which the rdf is calculated.\nnbins:  The number of bins for the rdf.\nsigma:  The sigma of the gaussian used to smear the density.\nnshmax:  The farthest possible shell used for computing RMS  \nwith the rsf (if <nshmax shells are found then fewer\nwill be used).\nI think this works but large changes in shape give rsf that\nare too different to compare exactly and the RMS!=0.  However,\nlooking at the output can make it clear how the shells are\nrelated.  At this point the 2 structure must have the same\nnumber of atoms of each type.  If you want to compare 2 POSCARs\nwhere one is a multiple of the other in terms of atoms of  \neach type you can create supercell (see --supercell) to make this\nfunction usable.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--rebuild_database": {"optional_attributes": [], "attributes": [], "description": "Fetches new entries and rebuilds the AFLOW database file.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--revsg": {"optional_attributes": [], "attributes": [], "description": "Constructs a POSCAR of a specified space group and with specified wyckoff positions\n#  is the space group number\nn  multiplicity of wyckoff site (e.g., do position 4 g 1 twice)\nl  specifies multiplicity group (e.g., positions with multiplicity 2)\nm  position within multiplicity group (e.g., 2 would indicate the second position\nwith multiplicity defined by l). (R. Taylor).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--rm_atom": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a POSCAR where iatom has been removed.\niatom must be between 0 to N-1.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--rm_copies": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a POSCAR where only the first appearance of\neach cartesian position of the same type atom has been kept.\nUseful if you have multiple copies of atoms at the same\npositions for some reason. Note. This routine does not compare\nequivalent lattice positions so you are not sure that equivalent\natoms are not in the same place.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--rsm": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a Rasmol (rsm) format file based on\nthe POSCAr input file. This output can be saved as .rsm file\nand is designed to be visualized in simpler version of Rasmol\nwhich is called RasTop program. It might work in Rasmol program\ndirectly. The format includes the plotting of the unit cell wireframe\nand spacefill 150 for the atomic radius. (WS Sept07)\n\nSimilar to aflow -rsm, with additional option of atom labeling\nbased on the atomic number (z) of each type. If --z option is not\nused, the default is --z 1 2 3 ... Ntypes. (WS Sept07)\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--sc": {"optional_attributes": [], "attributes": [], "description": "Output POSCAR in a standard conventional lattice\n(use --sp | --std_prim | --standard_primitive | --sprim\t\nto output POSCAR in a standard primitive lattice) (WS & SC Nov09)\nREF: Setyawan Curtarolo, DOI: 10.1016/j.commatsci.2010.05.010\nCheck aflow --readme=symmetry\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--std_conv", "--standard_conventional", "--sconv"], "inputs": [" POSCAR"]}, "--scale=": {"optional_attributes": [], "attributes": "s ", "description": "Outputs POSCAR file giving same volume as input but\nwith scale = s.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--sd": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a POSCAR with selective dynamics\nformatting.  AAi gives the selective dynamics setting for\natoms of type i and has the form AAi=TTT,TTF,etc..  If there\nare fewer AAi than atom types then the remaining types are\ndefaulted to TTT. A warning will be printed and the default\nvalue of TTT will be used if the AAi strings are shorters\nthan three characters. (SC0907)\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR    "]}, "--setcm": {"optional_attributes": [], "attributes": [], "description": "Sets to center of mass to (cm1,cm2,cm3) by shifting all the\natom positions.  Use --mom to check the shift was correct.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--setorigin": {"optional_attributes": [], "attributes": [], "description": "With r1 r2 r3, it ets the origin to r1,r2,r3 by shifting all the\natom positions. Coordinates (r1,r2,r3) are considered fractional\nis the POSCAR is in fractional, and cartesian otherwise.\nWith atom#, it sets the origin to the position of atom# \n(atom# goes from 0 to size-1).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--sewald": {"optional_attributes": [], "attributes": [], "description": "Finds the screened electrostatic energy of the POSCAR file using a\nreal space sum.  eta is now the screening length (ie, all  \ncoulomb interactions are multiplied by exp(-eta*R).\nCharges must be entered after each atom position.\nE.g.,   Co 0 0 0 +2.  \n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--sgdata": {"optional_attributes": ["tolerance| =tight| =loose"], "attributes": [], "description": "Outputs the following space group information: space group number, space group labels \n(Hermann Mauguin, Hall, Schoenflies), Laue class, crystal class, ITC setting, ITC origin shift, \ngeneral Wyckoff position, and the WYCCAR (similar to --edata).\nThis routine consists of symmetry consistency checks. If symmetry rules are broken,\nthe code automatically changes tolerance and recalculates from the beginning.\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must not be below the minimum\ninteratomic distance, otherwise an error will be thrown.)\nMagnetic analysis:\nThe magnetic tag specifies the magnetic moment on each of the atoms.  The\ntwo input formats are a comma separated string of the magnetic moments -\nin the same order as the input file, the location of the INCAR, or the location\nof the OUTCAR, which is then read and the magnetic moment for each atom is found\n(must be a static calculation, otherwise this information isn't specified).\nWorks for both collinear and non-collinear systems (AFLOW autodetects\ncollinear/non-collinear based on the input).\nSpace group setting:\nThe space group setting can be specified with the optional flag [--setting=1| =2] (the default is setting 1).\nFor rhombohedral systems, setting 1=rhl and 2=hex.\nFor monoclinic systems, setting 1=unique axis-b and 2=unique axis-c.\nOptions:\n[--no_scan] : Will not perform tolerance scan.\n[--print=txt | --print=json] : Specify output format.\nCheck aflow --readme=symmetry\n\n", "additional_flags": {"--setting": {}, "--no_scan": {}, "--print": {}, "--screen_only": {}, "--mag": {}, "--magnetic": {}, "--magmom": {}}, "mandatory commands": {}, "equivalent commands": ["--space_group_data"], "inputs": [" POSCAR"]}, "--shell=": {"optional_attributes": [], "attributes": "ns,r1,r2,name,dens ", "description": "Based on the structure in POSCAR, this outputs to standard\nout all points with ns neighbors in a shell define by inner\nradius r1 and outer radius r2 (r1<r2).  The shell is\nrestricted to only consider atoms of type name (name=NONE (\"\"))\nis unrestricted).  The dens is the linear density of\ncandidate points.  So for example, to search for all sites with\n4 oxygen around them between 1.8 and 2.2 Angstron you could type\naflow --shell=4,1.8,2.2,O,20\nThis would construct a 20x20x20 grid of puts in the cell and\nprint out all points that met the shell criteria.  The output\ngives all the points and their shels meeting the shell criteria.\nHowever, since many points are in the same shell it is\nconvenient to find unique shell environments.  Therefore, aflow\nreduces the complete list to keep only one representative point\nfrom each unique shell. The shells are distinguished by their\ncenters of mass.  The unique points and their shells are output\nas all unique points meeting the shell criteria.  The\nrepresentative point for each shell is the shell center of mass.\nThis routine is great for finding open tetrahedral and octahedral\nsites where one might put an intercalant.  This routine can\ntake a while to run (usually a 20x20x20 mesh is enough, and might\ntake a couple of minutes for a big cell - start small!).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--shift=": {"optional_attributes": [",cCdD"], "attributes": "Sx,Sy,Sz < POSCAR", "description": "Outputs to standard out a POSCAR with all positions shifted by  \nS=(Sx,Sy,Sz).  The shifted is added to the positions.  The shift\nis assumed to be given in Cartesian coordinates unless you specify\nc or C for Cartesian or d or D for direct at the end.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--sitepointgroup": {"optional_attributes": ["tolerance| =tight| =loose"], "attributes": [], "description": "Calculates the site point group symmetry for every atom in the\nunit cell and writes it in the aflow.agroup.out file.\nThis routine consists of symmetry consistency checks. If symmetry rules are broken,\nthe code automatically changes tolerance and recalculates from the beginning.\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must not be below the minimum\ninteratomic distance, otherwise an error will be thrown.)\nMagnetic analysis:\nThe magnetic tag specifies the magnetic moment on each of the atoms.  The\ntwo input formats are a comma separated string of the magnetic moments -\nin the same order as the input file, the location of the INCAR, or the location\nof the OUTCAR, which is then read and the magnetic moment for each atom is found\n(must be a static calculation, otherwise this information isn't specified).\nWorks for both collinear and non-collinear systems (AFLOW autodetects\ncollinear/non-collinear based on the input).\nOptions:\n[--no_scan] : Will not perform tolerance scan.\n[--print=txt | --print=json] : Specify output format.\n[--screen_only] : Prints symmetry elements to string and does not write to a file.\n[--mag|--magnetic|--magmom=[m1,m2,...|INCAR|OUTCAR]]: Perform symmetry analysis of spin system, where spin degree of freedom breaks symmetry \nCheck aflow --readme=symmetry\n", "additional_flags": {"--no_scan": {}, "--print": {}, "--screen_only": {}, "--mag": {}, "--magnetic": {}, "--magmom": {}}, "mandatory commands": {}, "equivalent commands": ["--agroup"], "inputs": [" POSCAR"]}, "--spacegroup": {"optional_attributes": ["tolerance| =tight| =loose"], "attributes": [], "description": "Calculates space group symmetry of the cell {R|t+T} with\ntranslations as big as |T| and writes it in the aflow.sgroup.out\nfile. See documentation of aflow.\nBe careful because the size of the space group increases\nas the radius^3 times the size of the factor roup.\nThe point and factopr groups are required for the space group,\ntherefore the aflow.pgroup.out and aflow.fgroup.out files will\nbe generated as well.\nThis routine consists of symmetry consistency checks. If symmetry rules are broken,\nthe code automatically changes tolerance and recalculates from the beginning.\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must not be below the minimum\ninteratomic distance, otherwise an error will be thrown.)\nMagnetic analysis:\nThe magnetic tag specifies the magnetic moment on each of the atoms.  The\ntwo input formats are a comma separated string of the magnetic moments -\nin the same order as the input file, the location of the INCAR, or the location\nof the OUTCAR, which is then read and the magnetic moment for each atom is found\n(must be a static calculation, otherwise this information isn't specified).\nWorks for both collinear and non-collinear systems (AFLOW autodetects\ncollinear/non-collinear based on the input).\nOptions:\n[--no_scan] : Will not perform tolerance scan.\n[--print=txt | --print=json] : Specify output format.\n[--screen_only] : Prints symmetry elements to string and does not write to a file.\n[--mag|--magnetic|--magmom=[m1,m2,...|INCAR|OUTCAR]]: Perform symmetry analysis of spin system, where spin degree of freedom breaks symmetry \nCheck aflow --readme=symmetry\n\n", "additional_flags": {"--no_scan": {}, "--print": {}, "--screen_only": {}, "--radius": {}, "--mag": {}, "--magnetic": {}, "--magmom": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--sqs=": {"optional_attributes": [], "attributes": "structure_type,atom_num,neighbour_num,sl_num_min,sl_num_max,A,B | ", "description": "Generate special-quasirandom-structure (SQS)\nstructure: bcc/fcc/hcp\natom_num : maximum number of atoms in a cluster\nneighbour_num : maximum number of nearest neighbour pairs in a cluster\nsl_num_min : minimun number of the base structure in the superlattice\nsl_num_max : maximum number of the base structure in the superlattice\n\nTo generate sqs bcc structure, one needs first to generate a\n'cluster' file and a bcc superlattice file. Use the following commands\nto get sqs bcc from 5 to 8 atom/cell of AuCu alloy with energy\ncalculated by using cluster expansion method with cluster containing up \nto 6th nearest neighbour pairs.\n=-=-=-=-=-=-=-=-=-=-=-=\n1. Get cluster file. Number of atoms in a cluster is from 1 to 2 and\ndistance of two atoms in a cluster is from the 1st to the 6th neighbour\ndistance.\naflow --cluster=bcc,1,2,1,6\n2. Get all supercell configuration. Here we get supercell with 8 atom.\nThe first 5 is the smallest number of atoms in a supercell and the\nsecond one is the largest number.\naflow --superlattice=bcc,6,8\n3. Get SQS. Check correlations of clusters with up to 2 atoms and 6th\nneighbour distance. You can give any two element names for the last two\narguments.\naflow --sqs=bcc,2,6,5,8,Au,Cu\n\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--special-quasirandom-structure"]}, "--species": {"optional_attributes": [], "attributes": [], "description": "Outputs the species names, as taken from the 1st representative\natom of each set.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--spline": {"optional_attributes": [], "attributes": [], "description": "Outputs to standard out a cubic spline interpolation of npt  \nevenly spaced points.  The infput file must be two colums  \ngiving X and Y(X).  The derivatives at the endpoints are  \nassumed to be zero.  To change this, change yp1 and ypn  \nin the SetSpline function in the aflow_pflow_funcs.cpp file.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" file"]}, "--sp": {"optional_attributes": [], "attributes": [], "description": "Output POSCAR in a standard primitive lattice\n(use --sc | --std_conv | --standard_conventional | --sconv\t\nto output POSCAR in a standard conventional lattice) (WS & SC Nov09)\nREF: Setyawan Curtarolo, DOI: 10.1016/j.commatsci.2010.05.010\nCheck aflow --readme=symmetry\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--std_prim", "--standard_primitive", "--sprim"], "inputs": [" POSCAR"]}, "--statdiel": {"optional_attributes": [], "attributes": [], "description": "Extracts and diagonalizes the static dielectric constant tensor\nfrom the output of a DFPT run (see the aflow \"DIELECTRIC_STATIC\" tag).\nThe input OUTCAR can be in one of two formats: plain text (regular VASP\noutput), or compressed with the appropriate utility (OUTCAR*[.bz2,.gz,.xz]). The\nroutines attempt to symmetrize the tensor to within a tolerance\n(currently set to 1.0e-5) prior to diagonalization.\nThe output is a single row containing 6 numbers. The first three are\nthe real-valued diagonal terms of the tensor eps(xx), eps(yy), epz(zz);\nwhile the second set of three contain any imaginary eigenvalues that\nwould result from a failure of the ad-hoc symmetrization procedure.\nExample corresponding to Al1As1_ICSD_67784:\ninput:  aflow --statdiel OUTCAR.dielectric_static[.bz2,.gz,.xz]\noutput: 8.772122    8.772122    8.772122    0.000000    0.000000    0.000000 \n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--suffix=": {"optional_attributes": ["directory,"], "attributes": "\"from2to\"", "description": "Change the suffixes of VASP files. Easy conversion between AFLOW format and VASP format. (KESONG Dec. 22nd, 2013)\nMnemonic: from2to with from/to =[n=none;r1=relax1;r2=relax2;r3=relax3;s=static;b=bands] or without abbreviations.\nChanges suffix of all VASPFILEs from VASPFILE*\"from\" to VASPFILE*\"to\".\nIf a directory is specified (e.g. aflow --suffix=abc,n2s) \nthen it change abc/VASPFILE*\"from\" to abc/VASPFILE*\"to\"\nExample: aflow --suffix=n2s   (or --suffix=none2static)\nChange VASPFILE* to VASPFILE*.static\nExample: aflow --suffix=s2n     (or --suffix=static2none)\nChange VASPFILE*.static to VASPFILE*\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--sumpdos": {"optional_attributes": [], "attributes": [], "description": "Works for vasp.46x\nThis allows you to sum up projected DOS together for convenient\nplotting.  It only works when you have run with the following  \nINCAR file settings.  LORBIT=1 or 2 and set RWIGS, or  \nLORBIT = 11 or 12 and no RWIGS (only works when using PAW PP).\nIf you are running parallel you must set NPAR=1.  The\ninput file is similar to --pdos above but somewhat simpler\nso I give a full example here.\n\n# Input for aflow --sumpdos.\n\n# These values you supply once.\nSPIN = 1 # 1 = non-spin polarized, 2 = spin polarized\n# Default 1\nEFERMI = -999 # This will be subracted from the energies.\n# Set to 0 to subtract nothing, -999 to use\n# the E_Fermi in the DOSCAR.  Default -999.\nNLM = 9 # number of orbitals, 9 (spd:1+3+5) or 16 (spdf:1+3+5+7)\n# Default 9\nPRINT_PARAMS = 0 # 0=prints only data (easy to plot).\n# 1=prints all the input parameters.\n# default: 0\n\n# You can have as many cases as you want.\n# They are all added together.\n\n# case 1: t2g on atom 1\nATOMS = 1 # default: no atoms\nLMVALUES = 5 6 8 # default: no lm\n# case 2: eg on atoms 2 and 3\nATOMS = 2 3 # default: no atoms\nLMVALUES = 7 9 # default: no lm\n\nAll # denote comment lines and can be put anywhere.  \nEach case is started when the token ATOMS is used.  \nFollowing an ATOMS token, all LMVALUES tokens  \nwill apply to the atoms denoted in the preceeding  \nATOMS token until the next ATOM token. You can have any number  \nof cases, and the results for all cases are added together.  \nWARNING: make sure to use SPIN to set if it is a spin poloarized\ncalculation, make sure to use EFERMI to your desired reference,\nand make sure to set NLM to 9 (spd) or 16 (spdf).\nThe lm values correspond to orbitals by the following scheme.\nInput number: 1 2  3  4  5   6   7   8   9      \nOrbitals:     S Py Pz Px Dxy Dyz Dz2 Dxz Dx2-y2\nInput number: 10 11 12 13 14 15 16  \nOrbitals:     F1 F2 F3 F4 F5 F6 F7  \n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--supercell=": {"optional_attributes": [], "attributes": "a11,a12,a13,a21,a22,a23,a31,a32,a33 ", "description": "aflow --supercell=a11,a22,a33 < POSCAR\naflow --supercell=file < POSCAR\nOutputs to standard out a supercell of the input POSCAR file.\nThis lattice vectors of the supercell are given by multiplying\nthe original cell parameters by the 3x3 matrix a_ij coefficients.\nThe supercell need not be integral combinations of the original\nlattice vectors, although using fraction may cause you to end up\nwith a lattice inequivalent to your original. This can be used\nto build big supercells, swap lattice vectors, etc.\nThe nine numbers must be separated spaces, and they form the\nnine elements a11,a12,a13,a21,a22,a23,a31,a32,a33 of the 3x3\nsupercell matrix, respectively. If you specify only 3 numbers,\nthe other six are taken zero. If you use the \"file\" syntax,\nnine numbers are read from file. They can be on one or\nmulitple lines. New algorithm by SC (aug07).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--supercell_strlist=": {"optional_attributes": [], "attributes": "a11,a12,a13,a21,a22,a23,a31,a32,a33,strlist", "description": "aflow --supercell_strlist=a11,a22,a33,strlist\naflow --supercell_strlist=file,strlist\nOutputs to standard out a sequence of structures in POSCAR format.\nThe structures are supercells formed using the supercell matrix\na11,a12,a13,a21,a22,a23,a31,a32,a33. If only 3 values are specified\nthe other are taken to be zero. If you use the \"file\" syntax,\nnine numbers are read from file. They can be on one or mulitple\nlines. For more information on supercells see --supercell.\nFor more information on a strlist see --make_strlist.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--superlattice=": {"optional_attributes": [], "attributes": "structure_type,n_min,n_max ", "description": "--superlattice=VASP,structure_type,A,B < superlattice_name\nGenerate a superlattice of base structure POSCAR\nstructure_type : fcc/bcc/hcp\nn_min, n_max : minimum and maximum numbers of base structures in the superlattice\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--swap": {"optional_attributes": [], "attributes": [], "description": "Swap the specie number 1 with the specie number 2.\nIt is useful if you forgot to put the POSCAR in alphabetic mode.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--terdata=": {"optional_attributes": ["--fonts=XX | --keep=eps | --print=jpg | --print=gif | --print=png"], "attributes": "Aa:Bb:Cc   ", "description": "Inputs are the elements in alphabetic order. Output is ternary convexhull named\n\"phasediagram_AaBbCc.num.pdf\". The num is the calculated number of compounds.\nEX:\naflow --terdata=Nb:Pt:Rh\nNo matter the order of the elements, the list is alphabetized.\nOptions\n--fonts=XX  specity the size of gnuplot fonts, default 50\n--keep=eps  avoid to delete the postscript before making the pdf\n--print=jpg       adds the jpg picture\n--print=gif       adds the gif picture\n--print=png       adds the png picture\n\nacovasp --terdata_exist list\nThe list is the one containing each element for the systems for a certain format.\nEach element should be alphabetical order. Put 2 strings before each elements.\nEX:\naflow --terdata_exist system\n\nINPUTS EX:\nempty empty Al Co Mn\nempty empty Co Ge Mn\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--terdata": {"optional_attributes": [], "attributes": [], "description": "Inputs are the elements in alphabetic order and extra data for the list. Output is ternary convexhull named\n\"phasediagram_ABC.num.pdf\". The num is the calculated number of compounds.\nlist type is:\nADDRESS1    COMPOUND_NAME1\nADDRESS2    COMPOUND_NAME2\n...\t      ...\nEX:\naflow --terdata terdata Nb Pt Rh list\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--uffenergy": {"optional_attributes": [], "attributes": [], "description": "Output the energy of the structure using the simplified Universal Force Filed (UFF) method [JACS, 114, 10024 (1992)].\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--ue"], "inputs": ["  POSCAR"]}, "--update_database": {"optional_attributes": [], "attributes": [], "description": "Fetches new entries and rebuilds the AFLOW database file if new entries are available.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--vasp": {"optional_attributes": [], "attributes": [], "description": "Transforms the GEOMETRICAL (or whicever is the input file format) to a        \nVASP format.                                          \n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--volume": {"optional_attributes": [], "attributes": [], "description": "Outputs POSCAR file giving having volume equal to v.\naflow --volume*= x < POSCAR\naflow --volume+= x < POSCAR\nOutputs POSCAR with volume changes as *=, += actor (like in c,c++).\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--wyccar": {"optional_attributes": ["tolerance | =tight | =loose"], "attributes": [], "description": "Prints the wyccar file (the poscar file with wyckoff positions) for the input POSCAR\nThe wyccar format presents the lattice in standard conventional form and the wyckoff \npositions with their associated labels and site symmetry. If variability in the \nWyckoff positions exists, the algorithm finds the Wykoff positions with the \"smallest\" \nlettering scheme (\"a\" being the smallest). (R. Taylor/ D. Hicks)\nTolerance:\nThe tolerance is given in Angstroms.  There are two preset tolerances:\ntight: minimum_interatomic_distance/100.0\nloose: minimum_interatomic_distance/10.0\nThe default tolerance is the \"tight\" tolerance value.\nA value can also be specified. (Note, it must not be below the minimum\ninteratomic distance, otherwise an error will be thrown.)\nSpace group setting:\nThe space group setting can be specified with the optional flag [--setting=1| =2] (the default is setting 1).\nFor rhombohedral systems, setting 1=rhl and 2=hex.\nFor monoclinic systems, setting 1=unique axis-b and 2=unique axis-c.\nMagnetic analysis:\nThe magnetic tag specifies the magnetic moment on each of the atoms.  The\ntwo input formats are a comma separated string of the magnetic moments -\nin the same order as the input file, the location of the INCAR, or the location\nof the OUTCAR, which is then read and the magnetic moment for each atom is found\n(must be a static calculation, otherwise this information isn't specified).\nWorks for both collinear and non-collinear systems (AFLOW autodetects\ncollinear/non-collinear based on the input).\nOptions:\n[--no_scan] : Will not perform tolerance scan.\n[--mag|--magnetic|--magmom=[m1,m2,...|INCAR|OUTCAR]]: Perform symmetry analysis of spin system, where spin degree of freedom breaks symmetry\nCheck aflow --readme=symmetry\n\n", "additional_flags": {"--no_scan": {}, "--setting": {}, "--mag": {}, "--magnetic": {}, "--magmom": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--xray=": {"optional_attributes": [], "attributes": "lambda ", "description": "Outputs to standard out the powder xray scattering pattern for\nthe structure specified in the POSCAR input file.  The\nwavelength of the scattering radiation is taken to be l.\nThe xray calculation is almost nothing more that the structure\nfactor, altough it includes approximate treatments of the\nDebye-Waller terms and the Lorentz-polarization.  In the xray\ncalculations there are a number of terms that require a lot of\ninformation to really do right so I approximate them.  First,\nscattering factors default to the atomic number.  In some cases\nI coded more accurate values taken from tables for lambda=1.5418.\nNo lambda dependence of the scattering factors is presently\nincluded.  For the list of all coded atomic scattering factors\nsee the constructor for the structure class in structure.cc.\nI include the Lorentz-polarization and an approximate\nDebye-Waller factor (DWF).  The DWF is found assuming T=300,\nT_Debye=300, and within the high-temperature Debye aproximation.\nThe atomic mass defaults to twice the atomic number but I\nhave input a few more accurate values in the code.  For the\nlist of all coded atomic masses see the constructor for the\nstructure class in structure.cc.  This simulation should\ngive very accurate peak locations and qualitative relative\nintegrated intensities (peak heights).   I am still not\nhappy with why the peak intensitities do not reproduce other\ncodes better.  The output contains formats with and without\npeaks at the same 2theta grouped together.  It also contains\ndata ready for plotting.  Each type of data has a keyword on\nevery line so you can grep it out easily.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--xray_peaks=": {"optional_attributes": ["--threshold=threshold"], "attributes": "lambda  < POSCAR", "description": "Outputs the peaks in amplitude from the --xray analysis.\nThe order is sorted by amplitude.\nThe format is:\n\nX-Ray Peaks:\nTwo-Theta=34.008,40.488,77.689,53.878\nAmplitude=100,50.638,24.551,17.542\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--xrd_dist=": {"optional_attributes": [], "attributes": "h,k,l ", "description": "Compute Miller plane distance (distance between planes of atoms). The triplet h,k,l\ndefines the plane spanned by the three points a/h,b/k,c/l, where a b c\nare the CONVENTIONAL lattice vectors. You may enter h,k,l as integers\n(e.g., 1 2 3), decimal numbers (e.g., 0.56 .4 .5), or fractions (e.g., 1/2 3/4 4/5)\nor any combination of the three. The POSCAR must be in conventional form to get\nmeaningful results. You may first use the aflow command \"aflow --sc < POSCAR\" to get\nstandard conventional. For example,\ncat POSCAR | aflow --sc | aflow --xrd_dist=1,0,0   \t\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR\t"]}, "--xyz": {"optional_attributes": ["n1"], "attributes": [], "description": "Outputs to standard out an xyz file based on the POSCAR input\nfile.  This can be used as input for rasmol, xmol, etc..\nIf you want atom names you must put them after each atom\nposition in the POSCAR file (see -names).  If any names are\nmissing they are defaulted to H.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--xyzwignerseitz": {"optional_attributes": [], "attributes": [], "description": "Performs \"aflow --xyz=1,1,1\" but moves the images\nof the atoms in the Wigner-Seitz cell. This parameter\nis usefull to fight against VASP trend of moving atoms\nin different (but traslationally equivalent) positions\nof the unit cell. (SC 10Jan04).\n\n", "additional_flags": {"--xyzws": {}}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" POSCAR"]}, "--zval": {"optional_attributes": ["directory"], "attributes": [], "description": "Outputs from the available POTCAR/OUTCAR the sum of ZVAL.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--zval_atom": {"optional_attributes": ["directory"], "attributes": [], "description": "Outputs from the available POTCAR/OUTCAR and POSCAR/CONTCAR the ZVAL of the cell per atom.\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--zval_cell": {"optional_attributes": ["directory"], "attributes": [], "description": "Outputs from the available POTCAR/OUTCAR and POSCAR/CONTCAR the ZVAL of the whole cell.\n\n******************************************************************************************\n\nFROZSL MODE\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--frozsl_vaspsetup_aflow": {"optional_attributes": [], "attributes": [], "description": "Takes the FROZSL.output (the one containing all representations\nand deformations) and makes the POSCAR part of the aflow.in.\nAll the calculations are ready to be ran as they are enclosed\nin START.XXXX/STOP.XXXX frameworks and a AFLOW_POSTSCRIPT is\ngenerated to extract all the energies for the various directories.\nIf another parameter is passed: i.e.\naflow --frozsl_vaspsetup_aflow --file\nthen the command used to make the POSCARs is printed.\n(Mike Mehl Dec 09).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--frozsl_vaspsetup"], "inputs": [" FROZSL.output"]}, "--frozsl_vaspsetup_poscar": {"optional_attributes": [], "attributes": [], "description": "Takes the FROZSL.output (the one containing all representations\nand deformations) and makes all the POSCARS.\nIf another parameter is passed: i.e.\naflow --frozsl_vaspsetup_poscar --file\nthen the command used to make the POSCARs is printed.\n(Mike Mehl Dec 09).\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" FROZSL.output"]}, "--frozsl_analyze": {"optional_attributes": [], "attributes": [], "description": "", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": [], "inputs": [" aflow.frozsl.out"]}, "--frozsl_readme": {"optional_attributes": [], "attributes": [], "description": "A short introduction to frozsl calculations.\n\n******************************************************************************************\n\nAPENNSY MODE (this routines are available only in duke.edu domine)\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--frozsl_help"]}, "--xfixX": {"optional_attributes": [], "attributes": [], "description": "Repairs the convex-hull calculation by removing\n$(vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_LIB2))/LIB/RAW/system/structure\nand copying\n$(vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_LIB2))/LIB/LIB/system/structure\ninto\n$(vAFLOW_PROJECTS_DIRS.at(XHOST_LIBRARY_LIB2))/LIB/FIX/system/structure\nYou have to go by hand and check the problem (rare) and\nprobably clean and rerun the structure.\nThe exact command is included in pflow::XFIXX which\nis inside aflow_pflow_main.cpp\n\n******************************************************************************************\n\nALL LIBRARIES MODES\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--lib2raw=": {"optional_attributes": [], "attributes": "directory", "description": "\n\n", "additional_flags": {"--force": {}}, "mandatory commands": {}, "equivalent commands": []}, "--lib2scrub": {"optional_attributes": ["all,lib0,lib1,...,lib9,icsd"], "attributes": "", "description": "Goes through the LIBs and/or ICSD and try to find wrong entries.\n\n******************************************************************************************\nAFLOWLIB MODE\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--aflowlib=": {"optional_attributes": ["--print=txt | --print=json"], "attributes": "entry ", "description": "Create the WEB/PHP page for the entry specified as auid or aurl. It works where the complete\ndatabases have been installed.\nEntry can be auid, directories, icsd numbers.\nOPTIONS\n--print=txt (prints aflowlib.out)\n--print=json (prints aflowlib.json)\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--aflowlib_auid2aurl=": {"optional_attributes": [], "attributes": "auid1,auid2.... | ", "description": "Searches the available AUIDs and reports the AURLs if found.\nComp. Mat. Sci. 93, 178 (2014). [doi=10.1016/j.commatsci.2014.05.014] for more information.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--auid2aurl"]}, "--aflowlib_aurl2auid=": {"optional_attributes": [" --aurl2auid=..."], "attributes": "aurl1,aurl2.... ", "description": "Searches the available AURLs and reports the AUIDs if found.\nComp. Mat. Sci. 93, 178 (2014). [doi=10.1016/j.commatsci.2014.05.014] for more information.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}, "--aflowlib_auid2loop=": {"optional_attributes": [], "attributes": "auid1,auid2.... | ", "description": "Searches the available AUIDs and reports the postprocessed \"loop\" if found.\nComp. Mat. Sci. 93, 178 (2014). [doi=10.1016/j.commatsci.2014.05.014] for more information.\n\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": ["--auid2loop"]}, "--aflowlib_aurl2loop=": {"optional_attributes": [" --aurl2loop=..."], "attributes": "aurl1,aurl2.... ", "description": "Searches the available AURLs and reports the postprocessed \"loop\" if found.\nComp. Mat. Sci. 93, 178 (2014). [doi=10.1016/j.commatsci.2014.05.014] for more information.\n\n****************************************************************************************************\n*                                                                                                  *\n*                        aflow - STEFANO CURTAROLO Duke University 2003-2020                       *\n*                            High-Throughput ab-initio Computing Project                           *\n*                                                                                                  *\n****************************************************************************************************\n", "additional_flags": {}, "mandatory commands": {}, "equivalent commands": []}}